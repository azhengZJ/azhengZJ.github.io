<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微服务Spring-Cloud配置中心自动刷新</title>
      <link href="/2019/12/16/hou-duan/spring/wei-fu-wu-spring-cloud-pei-zhi-zhong-xin-zi-dong-shua-xin/"/>
      <url>/2019/12/16/hou-duan/spring/wei-fu-wu-spring-cloud-pei-zhi-zhong-xin-zi-dong-shua-xin/</url>
      
        <content type="html"><![CDATA[<p>只需要添加 bus（rabbitmq ）依赖和连接地址 会自动开启自动刷新<br>访问 http://{ 配置中心地址 }/actuator/bus-refresh 触发自动刷新</p><p>重点： 获取属性的属性类上必须要增加@RefreshScope 注解。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${girl.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/env"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getGirlInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="config项目"><a href="#config项目" class="headerlink" title="config项目"></a>config项目</h2><hr><p>启动类增加注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableConfigServer</span></code></pre><p>application.yml配置</p><pre class=" language-yml"><code class="language-yml">server:  port: 8888spring:  application:    name: CONFIG  rabbitmq:    host: 192.168.213.128    port: 5672    username: guest    password: guest  cloud:    config:      server:        git:          uri: http://git.baozun.com/mis/mis-config-repo.git          username: hsh10732          password: azheng@2018          basedir: D:\Users\hsh10732\MIS\spring-cloud\config-repomanagement:  endpoints:      web:        exposure:          include: "*" #暴露所有url，用于触发自动刷新eureka:  client:    serviceUrl:      defaultZone: http://localhost:8762/eureka/</code></pre><p>添加的依赖</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-config-server'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-actuator'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-bus-amqp'</span><span class="token punctuation">}</span></code></pre><h2 id="register项目"><a href="#register项目" class="headerlink" title="register项目"></a>register项目</h2><hr><p>启动类增加注解<br>@EnableEurekaServer</p><p>bootstrap.yml配置</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: Eureka #项目名称(必填：会作为文件夹名称前缀查找配置文件)  cloud:    config:      profile: dev #指定环境(必填：会作为文件夹名称后缀查找配置文件)</code></pre><p>添加的依赖</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-actuator'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-config'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-bus-amqp'</span>    runtime <span class="token string">'org.springframework.boot:spring-boot-devtools'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span><span class="token punctuation">}</span></code></pre><p>对应到git库中的配置文件<br>Eureka-dev.yml</p><h2 id="client项目"><a href="#client项目" class="headerlink" title="client项目"></a>client项目</h2><hr><p>启动类增加注解<br>@EnableEurekaClient</p><p>bootstrap.yml配置</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: BiDataApi  cloud:    config:      profile: deveureka:  client:    serviceUrl:      defaultZone: http://localhost:8762/eureka/</code></pre><p>添加的依赖</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-data-redis'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-config'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-bus-amqp'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-actuator'</span>    runtimeOnly <span class="token string">'org.springframework.boot:spring-boot-devtools'</span>    runtimeOnly <span class="token string">'mysql:mysql-connector-java'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">}</span></code></pre><p>对应到git库中的配置文件<br>BiDataApi-dev.yml</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java虚拟机内存模型</title>
      <link href="/2019/12/15/hou-duan/java/jvm/java-xu-ni-ji-nei-cun-mo-xing/"/>
      <url>/2019/12/15/hou-duan/java/jvm/java-xu-ni-ji-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/articlePic/jvm1.png" alt="JVM内存模型图"></p><p><strong>程序计数器</strong><br>记录程序运行的下一条指令的地址，在多线程环境下，每一个线程都有自己的程序计数器<br><strong>虚拟机栈（JVM Stack）</strong><br>虚拟机栈是Java方法执行的内存模型，每个方法执行的时候，会在栈中创建一帧用于存储局部变量表、操作数栈、动态链接、方法出口。方法开始调用时，会创建栈帧并入栈，方法执行结束时会出栈。每个线程都有自己的栈。<br><strong>本地方法栈</strong><br>与虚拟机栈所发挥的作用是非常相似，本地方法栈则是为虚拟机使用到的Native方法服务，非java方法，线程独有。<br><strong>堆（Heap）</strong><br>堆是用于存放对象实例的地方，几乎所有对象实例在堆中分配。堆是线程共享的，这是多线程时同步机制的原因。<br>堆是GC管理的主要区域，GC在对堆进行回收前，首先要确定对象是否已死（不可能再被使用的对象）。<br>判断对象是否存活的算法有两种：引用计数算法、可达性分析算法<br><strong>方法区</strong><br>方法区也为所以线程所共享，用于存放已加载的类信息、静态变量、常量和即时编译器编译后的代码。-XX:MaxPermSize用于设置方法区大小</p><p><img src="/medias/articlePic/jvm2.png" alt="堆内存结构图"></p><p><strong>年轻代</strong><br>年轻代内存占1/3<br>年轻代执行垃圾回收时对性能没有影响，俗称 minor GC</p><p><strong>老年代</strong><br>老年代内存占2/3，<br>老年代执行垃圾回收时对性能影响比较大，他会停止程序的运行，耗时较长，俗称full GC</p><p><strong>垃圾回收过程</strong><br>新创建的对象首先默认都会被分配到伊甸园。那些超大的对象例外，他们会被直接放到老年代。<br>当Eden伊甸园区内存满的时候，就会触发执行引擎的Minor GC进行垃圾清理，剩下有用的对象被转移到From区。<br>当From区内存满的时候，同样会触发执行引擎的Minor GC进行垃圾清理，剩下有用的对象被转移到To区。<br>如果To区域的对象重新被使用到，就会重新分配给From区。<br>From到To区 执行GC 循环转换15次之后的对象，就会被转移到老年代。</p><p>当老年代执行垃圾回收时如果发现没有无用的对象可以清理时，并且内存已满，这时候新的对象进入就会导致内存溢出（OOM）。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法</title>
      <link href="/2019/11/16/hou-duan/java/chang-yong-pai-xu-suan-fa/"/>
      <url>/2019/11/16/hou-duan/java/chang-yong-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>分类</strong><br>1）插入排序（直接插入排序、希尔排序）<br>2）交换排序（冒泡排序、快速排序）<br>3）选择排序（直接选择排序、堆排序）<br>4）归并排序<br>5）分配排序（基数排序）</p><h2 id="直接插入排序（正序）"><a href="#直接插入排序（正序）" class="headerlink" title="直接插入排序（正序）"></a>直接插入排序（正序）</h2><p>从数组arr第二位开始循环 用变量 value 记录当前循环的值，然后和数组中当前循环位置前面的每一个值去对比，如果大于当前循环值 value 就右移一位，直到数值小于当前循环值 value ，记录下小于循环值 value 的数值的索引加一值count，然后将变量 i 的值放到索引count的位置 循环结束 排序完成  一共循环两次。  </p><p>简单理解：把最小值往前移</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>             <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   j<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>从左边第一位开始循环到最后对比相邻的两个数值的大小，大的右移，小的左移，第一遍完成后，最后一位已经是最大值。第二遍还是从第一位开始循环，循环到length-1，以此类推，一直循环，直到第一位为最小值。  </p><p>简单理解：把最大值往后移</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token keyword">int</span> a <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                           <span class="token keyword">int</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                           arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>                           arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="3、快速排序"><a href="#3、快速排序" class="headerlink" title="3、快速排序"></a>3、快速排序</h2><p>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。<br>快速排序首先要选定一个基准值，然后有两个指针一起从头和尾切换扫描，对比指针上的值和基准值的大小，前部分扫描如果基准值小于指针值，则将lo位置的值和hi位置的值对换，然后切换到后半部分扫描，以此类推。  </p><p>简单理解：找一个基准数，然后根据基准数的大小将数组分为大于基准数和小于基准数两个子数组进行排序，然后以此类推，直到所有的排好</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fastSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">fastSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fastSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span><span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lo<span class="token operator">>=</span>hi<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token function">sort1</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fastSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fastSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">sort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> key<span class="token operator">=</span>array<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">>=</span> key <span class="token operator">&amp;&amp;</span> hi <span class="token operator">></span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从后半部分</span>                     hi<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              array<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key <span class="token operator">&amp;&amp;</span> hi <span class="token operator">></span> lo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从前半部分</span>                     lo<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              array<span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       array<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span>       <span class="token keyword">return</span> hi<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写HashMap</title>
      <link href="/2019/11/15/hou-duan/java/shou-xie-hashmap/"/>
      <url>/2019/11/15/hou-duan/java/shou-xie-hashmap/</url>
      
        <content type="html"><![CDATA[<p>JAVA1.7 和 JAVA1.8 中HashMap的主要区别</p><p><strong>1、数据结构不一样</strong><br>JAVA1.7  数组、链表<br>JAVA1.8  数组、链表、红黑树  </p><p><strong>2、put方式不一样</strong><br>在JAVA1.7的时候是直接加入到链头，比较简单粗暴<br>在JAVA1.8中因为加入了红黑树，每一次PUT的时候必须要统计链表的长度，所以遍历后放到链尾。如果长度超过8，就要放到红黑树里面。<br>所以JAVA1.7的put效率略高于1.8。  </p><p><strong>3、get查询复杂度不一样</strong><br>JAVA1.7  O(n)<br>JAVA1.8  O(log n)<br>所以JAVA1.7的查询效率要低于1.8。  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>TreeNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 手撕HashMap * @author azheng * * @param &lt;K> * @param &lt;V> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用TreeNode的临界值     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认的负载因子大小     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化数组长度     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数组最大容量     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Set<span class="token operator">&lt;</span>K<span class="token operator">></span> keySet<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Collection<span class="token operator">&lt;</span>V<span class="token operator">></span> values<span class="token punctuation">;</span>    <span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 包含的键值映射数     */</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 记录在结构上被修改的次数     */</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     数组调节临界值     *  要调整数组大小的下一个数组长度临界值(数组容量 * 负载因子)     *  默认初始化为0，插入一个数据之后值就是 12（16 * 0.75）     *  当size达到12之后数组进行两倍扩容,此值也进行两倍扩容成24     *     */</span>    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 负载因子，默认为0.75     *     */</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param initialCapacity  最大的entry数量， 默认为1 &lt;&lt; 30;     * @param loadFactor 负载因子     */</span>    <span class="token keyword">public</span> <span class="token function">HashMapDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HashMapDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> var1<span class="token punctuation">;</span>        <span class="token keyword">return</span> var0 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>var1 <span class="token operator">=</span> var0<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> var1 <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * V firstEntry = table[(length-1) &amp; hash];     * @param hash     * @param key     * @return     */</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保证有对应的值才做处理，杜绝空指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// 先校验第一个节点</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> first<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//返回红黑树节点TreeNode</span>                    <span class="token comment" spellcheck="true">//return ((TreeNode&lt;K,V>)first).getTreeNode(hash, key);</span>                <span class="token punctuation">}</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果数组为空或者数组长度为0,则数组进行初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果此索引下为空，直接赋值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果此索引下不为空，则增加到链尾（不增加到链头，是为了统计链表长度）</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果链表长度超过8就转化为红黑树TreeNode</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>K<span class="token operator">></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> keySet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> values<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> entrySet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//容量超过最大值时，临界值设置为最大容量值并返回</span>                threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 容量在正常范围且超过负载临界值时（在调用方法之前已经做判断），做两倍扩容</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">{</span>                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两倍threshold</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 容量为0时 全部初始化为默认值</span>            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//扩容后数据重新添加</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token punctuation">{</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> table<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">setValue</span><span class="token punctuation">(</span>V newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写线程同步锁 ，CAS无锁算法</title>
      <link href="/2019/11/14/hou-duan/java/shou-xie-xian-cheng-tong-bu-suo-cas-wu-suo-suan-fa/"/>
      <url>/2019/11/14/hou-duan/java/shou-xie-xian-cheng-tong-bu-suo-cas-wu-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>类似于ReentrantLock（重入锁）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AccessLevel<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentLinkedQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>LockSupport<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程同步器 * 核心使用cas无锁算法 ，并自旋循环获取锁，且使用LockSupport进行线程阻塞和唤醒 * @author azheng * @since 2019/11/21 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZujiLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Thread lockHolder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span>AccessLevel<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span>AccessLevel<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ConcurrentLinkedQueue<span class="token operator">&lt;</span>Thread<span class="token operator">></span> waiters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>waiters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">==</span> waiters<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSwapState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">setLockHolder</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取锁失败进行排队</span>        Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        waiters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自旋 循环获取锁，并且进行阻塞，等待上一个线程唤醒。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>waiters<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> current <span class="token operator">&amp;&amp;</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                waiters<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getLockHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"lockHolder is not current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSwapState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放锁并唤醒下一个线程</span>            <span class="token function">setLockHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread current <span class="token operator">=</span> waiters<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapState</span><span class="token punctuation">(</span><span class="token keyword">int</span> except<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>stateOffset<span class="token punctuation">,</span>except<span class="token punctuation">,</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> <span class="token function">initUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> stateOffset <span class="token operator">=</span> <span class="token function">initStateOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">initStateOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>ZujiLock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Unsafe <span class="token function">initUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Field f <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Integer stock <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ZujiLock zujiLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZujiLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zujiLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stock <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stock <span class="token operator">=</span> stock <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-----------下单成功，剩余库存为："</span><span class="token operator">+</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-----------下单失败，已售罄!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        zujiLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFFECTIVE-JAVA（第二版）内容概要</title>
      <link href="/2019/10/11/hou-duan/java/effective-java-di-er-ban-nei-rong-gai-yao/"/>
      <url>/2019/10/11/hou-duan/java/effective-java-di-er-ban-nei-rong-gai-yao/</url>
      
        <content type="html"><![CDATA[<p>本书一共七十八小节，每个小节讲述了一条规则。 这些规则实践通常会使那些最优秀和最富有经验的程序员从中受益。 所有的内容分为11章，每章都涉及软件设计的一个广泛方面。 本书不需要按顺序阅读：每个小节都或多或少地独立存在。 这些小节有很多交叉引用，因此您可以通过本书轻松学习自己的课程。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p> 第二章 创建和销毁对象<br>第1条 考虑用静态工厂方法代替构造器<br>第2条 遇到多个构造器参数时要考虑用构建器（build模式）<br>第3条 用私有构造器或者枚举类型强化Singleton属性<br>第4条 通过私有构造器强化不可实例化的能力<br>第5条 避免创建不必要的对象<br>第6条 消除过期的对象引用<br>第7条 避免使用终结方法</p><p> 第三章 对于所有对象都通用的方法<br>第8条 覆盖equals时请遵守通用约定<br>第9条 覆盖equals时总要覆盖hashCode<br>第10条 始终要覆盖toString<br>第11条 谨慎地覆盖clone<br>第12条 考虑实现Comparable接口</p><p> 第四章 类和接口<br>第13条 使类和成员的可访问性最小化<br>第14条 在公有类中使用访问方法而非公有域<br>第15条 使可变性最小化<br>第16条 复合优先于继承<br>第17条 要么为继承而设计，并提供文档说明，要么就禁止继承<br>第18条 接口优于抽象类<br>第19条 接口只用于定义类型<br>第20条 类层次优于标签类<br>第21条 用函数对象表示策略（函数编程）<br>第22条 优先考虑静态成员类（内部类尽量使用static修饰）</p><p> 第五章 泛型<br>第23条 请不要在新代码中使用原生态类型<br>第24条 消除非受检警告<br>第25条 列表优先于数组<br>第26条 优先考虑泛型<br>第27条 优先考虑泛型方法<br>第28条 利用有限制通配符来提升API的灵活性<br>第29条 优先考虑类型安全的异构容器</p><p> 第六章 枚举和注解<br>第30条 用enum代替int常量<br>第31条 用实例域代替序数<br>第32条 用EnumSet代替位域<br>第33条 用EnumMap代替序数索引<br>第34条 用接口模拟可伸缩的枚举<br>第35条 注解优先于命名模式<br>第36条 坚持使用Override注解<br>第37条 用标记接口定义类型</p><p> 第七章 方法<br>第38条 检查参数的有效性<br>第39条 必要时进行保护性拷贝<br>第40条 谨慎设计方法签名<br>第41条 慎用重载<br>第42条 慎用可变参数<br>第43条 返回零长度的数组或者集合，而不是null<br>第44条 为所有导出的API元素编写文档注释</p><p> 第八章 通用程序设计<br>第45条 将局部变量的作用域最小化<br>第46条 for-each循环优先于传统的for循环<br>第47条 了解和使用类库（使用标准的工具提高开发效率并更容易维护）<br>第48条 如果需要精确的答案，请避免使用float和double<br>第49条 基本类型优先于装箱基本类型<br>第50条 如果其他类型更适合，则尽量避免使用字符串<br>第51条 当心字符串连接的性能<br>第52条 通过接口引用对象<br>第53条 接口优先于反射机制<br>第54条 谨慎地使用本地方法<br>第55条 谨慎地进行优化<br>第56条 遵守普遍接受的命名惯例</p><p> 第九章 异常<br>第57条 只针对异常的情况才使用异常<br>第58条 对可恢复的情况使用受检异常，对编程错误使用运行时异常<br>第59条 避免不必要地使用受检的异常<br>第60条 优先使用标准的异常<br>第61条 抛出与抽象相对应的异常<br>第62条 每个方法抛出的异常都要有文档<br>第63条 在细节消息中包含能捕获失败的信息<br>第64条 努力使失败保持原子性<br>第65条 不要忽略异常</p><p> 第十章 并发<br>第66条 同步访问共享的可变数据<br>第67条 避免过度同步<br>第68条 executor和task优先于线程<br>第69条 并发工具优先于wait和notify<br>第70条 线程安全性的文档化<br>第71条 慎用延迟初始化<br>第72条 不要依赖于线程调度器<br>第73条 避免使用线程组</p><p> 第十一章 序列化<br>第74条 谨慎地实现Serializable接口<br>第75条 考虑使用自定义的序列化形式<br>第76条 保护性地编写readObject方法<br>第77条 对于实例控制，枚举类型优先于readResolve<br>第78条 考虑用序列化代理代替序列化实例</p><h2 id="第二章-创建和销毁对象"><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h2><h3 id="第1条-考虑用静态工厂方法代替构造器"><a href="#第1条-考虑用静态工厂方法代替构造器" class="headerlink" title="第1条 考虑用静态工厂方法代替构造器"></a>第1条 考虑用静态工厂方法代替构造器</h3><p>可读性更强<br>它们有名称，扩展代码的可读性，更能清晰的表达程序的意图<br>避免重复创建<br>不必在每次调用它们的时候都创建一个新的对象，例如Boolean.valueOf(boolean)方法<br>返回子对象<br>可以返回原返回类型的任何子类型对象<br>代码更加简洁<br>不需要重复指明类型参数</p><p>不能被继承<br>无公共构造方法，将不能被继承<br>无实例化标志<br>与普通静态方法没有区别，没有明确的标识一个静态方法用于实例化类</p><h3 id="第2条-遇到多个构造器参数时要考虑用构建器（build模式）"><a href="#第2条-遇到多个构造器参数时要考虑用构建器（build模式）" class="headerlink" title="第2条 遇到多个构造器参数时要考虑用构建器（build模式）"></a>第2条 遇到多个构造器参数时要考虑用构建器（build模式）</h3><p>如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是不错的选择。<br>与重叠构造器相比，builder模式的客户端更易与阅读和编写<br>与JavaBeans相比，更加的安全</p><p>第3条 用私有构造器或者枚举类型强化Singleton属性<br>    实现单例模式通常有3种方法：静态成员，静态工厂方法，单元素枚举类型</p><p>静态成员<br>静态工厂方法<br>1、前两种不能保证全局只有一个对象，例如可以通过反射机制，设置AccessibleObject.setAccessible(true)，改变构造器的访问属性，调用构造器生成新的实例。<br>2、为了保证反序列化的时候，实例还是Singleton，必须声明所有的实例域都是transient的<br>单元素枚举类型<br>通过枚举实现Singleton更加简洁，同时枚举类型无偿地提供了序列化机制，可以防止反序列化的时候多次实例化一个对象</p><p>第4条 通过私有构造器强化不可实例化的能力<br>在创建工具类的时候，大部分是无需实例化的，实例化对它们没有意义。在这种情况下，创建的类，要确保它是不可以实例化的。<br>要避免这个问题，使用的方式是，定义一个私有的构造器，添加 throw new AssertionError()，阻止实例化。</p><p>第5条 避免创建不必要的对象<br>装箱类型尽量避免重新创建对象，例如反面例子：String a = new String(“Hello World”);</p><p>第6条 消除过期的对象引用<br>一般而言，只要是自己管理内存，就应该警惕内存泄漏问题。<br>假如你开辟了一段内存空间，并一直持有这段空间的引用，就有责任管理它，<br>因为GC无法自动完成对你承诺管理的内存的回收，除非你告诉它（显式地清空引用）。</p><p>第7条 避免使用终结方法<br>所谓的终结方法其实是指finalize()。终结方法finalize通常是不可预测的，也是很危险的<br> finalize()的执行过程：</p><h2 id="第三章-对于所有对象都通用的方法"><a href="#第三章-对于所有对象都通用的方法" class="headerlink" title="第三章 对于所有对象都通用的方法"></a>第三章 对于所有对象都通用的方法</h2><h3 id="第8条-覆盖equals时请遵守通用约定"><a href="#第8条-覆盖equals时请遵守通用约定" class="headerlink" title="第8条 覆盖equals时请遵守通用约定"></a>第8条 覆盖equals时请遵守通用约定</h3><p>正确覆盖equals方法，需要遵守它的通用约定：    </p><p>自反性<br>x.equals(x) 必须返回true<br>对称性<br> x.equals(y) 与 y.equals(x) 返回结果应该相同<br>传递性<br>x.equals(y)返回true，y.equals(z)返回true,则x.equals(z)应该返回true<br>一致性<br> 只要比较的实例对象的关键属性值没有改变，无论调用多少次equals，结果都应该相同<br>x.equals(null)=false<br>对于非null的x实例，x.equals(null) 永远返回false</p><h3 id="第9条-覆盖equals时总要覆盖hashCode"><a href="#第9条-覆盖equals时总要覆盖hashCode" class="headerlink" title="第9条 覆盖equals时总要覆盖hashCode"></a>第9条 覆盖equals时总要覆盖hashCode</h3><p>如果两个对象利用equals方法比较是相等的，那么这两个对象必须能返回同样的hashCode</p><h3 id="第10条-始终要覆盖toString"><a href="#第10条-始终要覆盖toString" class="headerlink" title="第10条 始终要覆盖toString"></a>第10条 始终要覆盖toString</h3><p>toString通用约定指出，被返回的字符串应该是一个“简洁的，但信息丰富，并且易于阅读的表达形式”，进一步的约定指出，建议所有的子类都覆盖这个方法。</p><h3 id="第11条-谨慎地覆盖clone"><a href="#第11条-谨慎地覆盖clone" class="headerlink" title="第11条 谨慎地覆盖clone"></a>第11条 谨慎地覆盖clone</h3><p>实际上，clone方法就是另一个构造器，必须确保它不会伤害到原始对象，并确保正确的创建被克隆对象中的约束条件。<br>由于覆盖clone方法很复杂，最好提供某些其他的途径来代替对象拷贝，或者干脆不提供这样的功能</p><h3 id="第12条-考虑实现Comparable接口"><a href="#第12条-考虑实现Comparable接口" class="headerlink" title="第12条 考虑实现Comparable接口"></a>第12条 考虑实现Comparable接口</h3><p> 什么时候应该考虑是想Comparable接口<br>你写的类是一个值类（前面的文章介绍过）。<br>类中有很明显的内在排序关系，如字母排序、按数值顺序或是时间等</p><h2 id="第四章-类和接口"><a href="#第四章-类和接口" class="headerlink" title="第四章 类和接口"></a>第四章 类和接口</h2><h3 id="第13条-使类和成员的可访问性最小化"><a href="#第13条-使类和成员的可访问性最小化" class="headerlink" title="第13条 使类和成员的可访问性最小化"></a>第13条 使类和成员的可访问性最小化</h3><p>可以有效的解除系统中各个模块的耦合度、实现每个模块的独立开发、使得系统更加的可维护，更加的健壮<br>第一条规则：尽可能使每个类和成员不被外界访问。尽可能使用最小的访问级别。</p><h3 id="第14条-在公有类中使用访问方法而非公有域"><a href="#第14条-在公有类中使用访问方法而非公有域" class="headerlink" title="第14条 在公有类中使用访问方法而非公有域"></a>第14条 在公有类中使用访问方法而非公有域</h3><p>反面示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">double</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>总之，公有类永远都不应该暴露可变的域</p><h3 id="第15条-使可变性最小化"><a href="#第15条-使可变性最小化" class="headerlink" title="第15条 使可变性最小化"></a>第15条 使可变性最小化</h3><p>不要提供任何会修改对象状态的方法（mutator）<br>保证类不会被扩展<br>使所有的域都是final的<br>使所有的域都成为私有的<br>确保对于任何可变组件的互斥访问</p><h3 id="第16条-复合优先于继承"><a href="#第16条-复合优先于继承" class="headerlink" title="第16条 复合优先于继承"></a>第16条 复合优先于继承</h3><p>在新的类中添加一个私有域，这种设计被称作”复合（composition）”。<br>这得到的类稳固，它不依赖于现有类的实现细节。即使现有的类添加了新的方法，也不影响新的类</p><h3 id="第17条-要么为继承而设计，并提供文档说明，要么就禁止继承"><a href="#第17条-要么为继承而设计，并提供文档说明，要么就禁止继承" class="headerlink" title="第17条 要么为继承而设计，并提供文档说明，要么就禁止继承"></a>第17条 要么为继承而设计，并提供文档说明，要么就禁止继承</h3><p>构造器决不能调用可被覆盖的方法<br>对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化</p><h3 id="第18条-接口优于抽象类"><a href="#第18条-接口优于抽象类" class="headerlink" title="第18条 接口优于抽象类"></a>第18条 接口优于抽象类</h3><p>接口的优点</p><p>现有的类可以很容易的被更新，以实现新的接口</p><p>接口是定义mixin（混合类型）的理想选择。</p><p>接口允许我们构造非层次结构的类型框架。<br>接口可以多继承<br>接口可以使得类的增强变得安全。</p><h3 id="第19条-接口只用于定义类型"><a href="#第19条-接口只用于定义类型" class="headerlink" title="第19条 接口只用于定义类型"></a>第19条 接口只用于定义类型</h3><p>常量接口是对接口的一种不良使用<br>总之，接口应该只被用来定义类型，它们不应该用来导出常量。</p><h3 id="第20条-类层次优于标签类"><a href="#第20条-类层次优于标签类" class="headerlink" title="第20条 类层次优于标签类"></a>第20条 类层次优于标签类</h3><p>标签类有着许多缺点，标签类过于冗长、容易出错，并且效率低下，标签类正是类层次的一种简单效仿</p><h3 id="第21条-用函数对象表示策略（函数编程）"><a href="#第21条-用函数对象表示策略（函数编程）" class="headerlink" title="第21条 用函数对象表示策略（函数编程）"></a>第21条 用函数对象表示策略（函数编程）</h3><p>使用函数编程代替策略模式</p><h3 id="第22条-优先考虑静态成员类（内部类尽量使用static修饰）"><a href="#第22条-优先考虑静态成员类（内部类尽量使用static修饰）" class="headerlink" title="第22条 优先考虑静态成员类（内部类尽量使用static修饰）"></a>第22条 优先考虑静态成员类（内部类尽量使用static修饰）</h3><p>非静态成员类的每个实例都隐含着与外围类的一个外围实例</p><h2 id="第五章-泛型"><a href="#第五章-泛型" class="headerlink" title="第五章 泛型"></a>第五章 泛型</h2><h3 id="第23条-请不要在新代码中使用原生态类型"><a href="#第23条-请不要在新代码中使用原生态类型" class="headerlink" title="第23条 请不要在新代码中使用原生态类型"></a>第23条 请不要在新代码中使用原生态类型</h3><p>指定泛型时尽量缩小泛型的范围</p><h3 id="第24条-消除非受检警告"><a href="#第24条-消除非受检警告" class="headerlink" title="第24条 消除非受检警告"></a>第24条 消除非受检警告</h3><p>（洁癖的我一直做的很好，eclipse没有任何黄色警告）</p><h3 id="第25条-列表优先于数组"><a href="#第25条-列表优先于数组" class="headerlink" title="第25条 列表优先于数组"></a>第25条 列表优先于数组</h3><p>数组是协变的<br>如果Sub是Super的子类型，那么数组类型Sub[]就是Super[]的子类型。泛型确是不可变的，List<sub>不是List<super>的子类型<br>数组是具体化的<br>数组在运行时才知道并检查它们的元素类型约束<br>数组是协变且可以具体化的<br>泛型是不可变的且可以被擦除的</super></sub></p><h3 id="第26条-优先考虑泛型"><a href="#第26条-优先考虑泛型" class="headerlink" title="第26条 优先考虑泛型"></a>第26条 优先考虑泛型</h3><p>使用泛型比使用需要在客户端代码中进行转化的类型来的更安全</p><h3 id="第27条-优先考虑泛型方法"><a href="#第27条-优先考虑泛型方法" class="headerlink" title="第27条 优先考虑泛型方法"></a>第27条 优先考虑泛型方法</h3><p>泛型方法就像泛型一样，使用起来比要求客户端转换输入参数并返回值的方法来的更加安全，也更加容易</p><h3 id="第28条-利用有限制通配符来提升API的灵活性"><a href="#第28条-利用有限制通配符来提升API的灵活性" class="headerlink" title="第28条 利用有限制通配符来提升API的灵活性"></a>第28条 利用有限制通配符来提升API的灵活性</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>E<span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> src<span class="token punctuation">)</span>                     <span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果类的E为Number，方法里的E传的又是Integer，此时会报错，原因在于Iterable<integer>并不是Iterable<number>的子类型，泛型是不协变的<br>解决方法：使用通配符 Iterable&lt;? extends E&gt;即可解决这个问题</number></integer></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> src<span class="token punctuation">)</span>                     <span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第29条-优先考虑类型安全的异构容器"><a href="#第29条-优先考虑类型安全的异构容器" class="headerlink" title="第29条 优先考虑类型安全的异构容器"></a>第29条 优先考虑类型安全的异构容器</h3><p>一般情况下，泛型最通常应用于集合，如set和Map，以及单元素的容器。<br>这些容器都被充当被参数化了的容器，意味着每个容器只能有一个或者多个固定数目的类型参数（Set、List只有一个，Map两个）<br>有时候我们可能需要更多的灵活性，比如数据库行可以有任意多的列，每个列的类型可能不一样，希望能以类型安全的方式访问所有列。</p><p>下面就实现了这样的效果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span>Object<span class="token operator">></span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span>Object<span class="token operator">></span>  map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>E<span class="token operator">></span> type<span class="token punctuation">,</span>E instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span> type<span class="token punctuation">,</span>E instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Favorite f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第六章-枚举和注解"><a href="#第六章-枚举和注解" class="headerlink" title="第六章 枚举和注解"></a>第六章 枚举和注解</h2><h3 id="第30条-用enum代替int常量"><a href="#第30条-用enum代替int常量" class="headerlink" title="第30条 用enum代替int常量"></a>第30条 用enum代替int常量</h3><p>探索enum的一些新用法：<br>定义枚举可以覆盖抽象方法<br>特定于常量的类主体：枚举类型中声明一个抽象方法特定于常量的方法实现：用具体的方法覆盖每个常量的抽象方法<br>          尝试使用switch</p><h3 id="第31条-用实例域代替序数"><a href="#第31条-用实例域代替序数" class="headerlink" title="第31条 用实例域代替序数"></a>第31条 用实例域代替序数</h3><p>定义枚举实例域写死序数，而不是用指针序数</p><h3 id="第32条-用EnumSet代替位域"><a href="#第32条-用EnumSet代替位域" class="headerlink" title="第32条 用EnumSet代替位域"></a>第32条 用EnumSet代替位域</h3><p>如果多个枚举常量同时共享相同的行为，则考虑策略枚举(嵌套枚举)</p><h3 id="第33条-用EnumMap代替序数索引"><a href="#第33条-用EnumMap代替序数索引" class="headerlink" title="第33条 用EnumMap代替序数索引"></a>第33条 用EnumMap代替序数索引</h3><p>大多数程序员都不需要这个方法。除非你在编写的是这种数据结构，否则最好避免使用original方法</p><h3 id="第34条-用接口模拟可伸缩的枚举"><a href="#第34条-用接口模拟可伸缩的枚举" class="headerlink" title="第34条 用接口模拟可伸缩的枚举"></a>第34条 用接口模拟可伸缩的枚举</h3><p>在java中一个枚举是无法直接去扩展另一个枚举的，但通过接口我们可以变相的实现这一点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">enum</span> BasicOperation <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token function">PLUS</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">MINUS</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String symbol<span class="token punctuation">;</span>    <span class="token function">BasicOperation</span><span class="token punctuation">(</span>String symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> symbol<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> symbol<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第35条-注解优先于命名模式"><a href="#第35条-注解优先于命名模式" class="headerlink" title="第35条 注解优先于命名模式"></a>第35条 注解优先于命名模式</h3><p>一般使用命名模式表明哪些程序元素需要通过某种工具或框架进行特殊处理 . 但是它有严重的缺点 – 以 Junit 为例<br>文字拼写错误会导致失败，但是没有任何提示<br>无法确保它们只用于相应的程序元素上（Junit针对的是方法名，不是类名）<br>它们没有提供将参数值与程序元素关联的好方法<br>注解类型可以很好的解决命名模式的缺点</p><h3 id="第36条-坚持使用Override注解"><a href="#第36条-坚持使用Override注解" class="headerlink" title="第36条 坚持使用Override注解"></a>第36条 坚持使用Override注解</h3><p>Override 注解来覆盖超类声明 , 编译器可以替你防止大量错误</p><h3 id="第37条-用标记接口定义类型"><a href="#第37条-用标记接口定义类型" class="headerlink" title="第37条 用标记接口定义类型"></a>第37条 用标记接口定义类型</h3><p>标记接口：指明一个类实现了具有某种属性的接口，例如Serializable接口。<br>标记注解：特殊类型的注解，不包含成员类型，标记注解的唯一目的就是标记声明。例如：@Override<br>如果想要定义类型，一定要使用接口，标记接口可以更加精确的进行锁定</p><h2 id="第七章-方法"><a href="#第七章-方法" class="headerlink" title="第七章 方法"></a>第七章 方法</h2><h3 id="第38条-检查参数的有效性"><a href="#第38条-检查参数的有效性" class="headerlink" title="第38条 检查参数的有效性"></a>第38条 检查参数的有效性</h3><p>参数检查的必要性<br>比如对象引用不能为null,比如必须是正数，你应该在文档中(或者注释中)清楚地指出所有这些限制<br>共有方法参数检查<br>对于共有方法,要用javadoc的@throw标签在文档中说明违反参数值限制会抛出异常<br>非共有方法参数检查<br>非公有方法一般使用断言来检查参数的有效性<br>保留的方法参数检查<br>对于有些参数,方法本身没有用到,保存起来供以后使用.检测这些参数的有效性尤为重要</p><h3 id="第39条-必要时进行保护性拷贝"><a href="#第39条-必要时进行保护性拷贝" class="headerlink" title="第39条 必要时进行保护性拷贝"></a>第39条 必要时进行保护性拷贝</h3><p>对于构造器的每个可变参数进行保护性拷贝</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Period</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Date start<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Date end<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Period</span><span class="token punctuation">(</span>Date start<span class="token punctuation">,</span> Date end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token string">" after "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Date <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> start<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Date <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> end<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个类看上去没有什么问题，时间是不可改变的。然而Date类本身是可变的。</p><pre class=" language-java"><code class="language-java">Date start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Date end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Period period <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Period</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> end<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了保护Period实例的内部信息避免受到修改，导致问题，对于构造器的每个可变参数进行保护性拷贝（defensive copy）是必要的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Period</span><span class="token punctuation">(</span>Date start<span class="token punctuation">,</span>Date end<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token string">" after "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>对于参数类型可以被不可信任类子类化的参数，请不要使用clone方法进行保护性拷贝<br>当X类提供了可变内部成员的访问能力时，该访问返回的应该是可变内部域的保护性拷贝。</p><h3 id="第40条-谨慎设计方法签名"><a href="#第40条-谨慎设计方法签名" class="headerlink" title="第40条 谨慎设计方法签名"></a>第40条 谨慎设计方法签名</h3><p>谨慎选择方法名称，遵循风格一致大众认可的名称<br>勿过于追求提供便利的方法：每个方法都应该尽其所能.方法太多会使得类难以学习<br>避免过长的参数列表。（少于等于4个，参数太多容易出错）<br>        a.分解多个方法<br>        b.创建辅助类来保存参数分组，辅助类一般为静态成员类。<br>        c.从对象构建到方法调用都采用Builder模式<br>对于参数类型,优先使用接口而不是类（例如:在编写方法使用HashMap类作为参数,还是使用Map接口作为参数呢?）<br>对于boolean类型,要优先使用两个元素的枚举类型</p><h3 id="第41条-慎用重载"><a href="#第41条-慎用重载" class="headerlink" title="第41条 慎用重载"></a>第41条 慎用重载</h3><p>应该避免胡乱的使用重载机制</p><h3 id="第42条-慎用可变参数"><a href="#第42条-慎用可变参数" class="headerlink" title="第42条 慎用可变参数"></a>第42条 慎用可变参数</h3><p>在重视性能的情况下，使用可变参数机制要小心，因为可变参数方法的每次调用都会导致进行一次数组分配和初始化。<br>有一种折中的解决方案，先声明出所有参数数目小于等于3的方法，当参数数目超过3个时，使用可变参数方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a1<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">}</span></code></pre><h3 id="第43条：返回零长度的数组或者集合，而不是null"><a href="#第43条：返回零长度的数组或者集合，而不是null" class="headerlink" title="第43条：返回零长度的数组或者集合，而不是null"></a>第43条：返回零长度的数组或者集合，而不是null</h3><p>编写客户端程序的程序员可能会忘记写这种专门的代码来处理null返回值</p><p>有时候会有人认为：null返回值比零长度数组更好，因为它避免了分配数组所需要的开销。<br>这个级别担心性能是不明智的,除非分析表明这个方法就是造成性能的根本原因;<br>其次对于不返回任何元素的调用,每次都返回同一个零长度数组是可能的,因为零长度数组是不可变的,而不可变对象有可能被自由共享</p><p>返回类型为数组或集合的方法没有理由返回null,而是返回一个零长度的数组或者集合</p><h3 id="第44条-为所有导出的API元素编写文档注释"><a href="#第44条-为所有导出的API元素编写文档注释" class="headerlink" title="第44条 为所有导出的API元素编写文档注释"></a>第44条 为所有导出的API元素编写文档注释</h3><p>基础知识：<br>/<em>*this is a description</em>/注释若干行，并写入 javadoc 文档<br>文档注释三部分：<br>第一部分是简述。<br>第二部分是详细说明部分。该部分对属性或者方法进行详细的说明，在格式上没有什么特殊的要求，可以包含若干个点号。<br>第三部分是特殊说明部分。这部分包括版本说明、参数说明、返回值说明等。</p><h2 id="第八章-通用程序设计"><a href="#第八章-通用程序设计" class="headerlink" title="第八章 通用程序设计"></a>第八章 通用程序设计</h2><h3 id="第45条-将局部变量的作用域最小化"><a href="#第45条-将局部变量的作用域最小化" class="headerlink" title="第45条 将局部变量的作用域最小化"></a>第45条 将局部变量的作用域最小化</h3><p>java允许你在任何可以出现语句的地方声明变量<br>要使局部变量的作用域最小化,最有力的方法就是在第一次使用它的地方声明<br>几乎每个局部变量的声明都应该包含一个初始化表达式（变量必须初始化）<br>将局部变量作用域最小化的方法是使方法小而集中</p><h3 id="第46条-for-each循环优先于传统的for循环"><a href="#第46条-for-each循环优先于传统的for循环" class="headerlink" title="第46条 for-each循环优先于传统的for循环"></a>第46条 for-each循环优先于传统的for循环</h3><p>for-each循环通过完全隐藏迭代器或者索引变量，避免混乱和出错的可能，适用于集合和数组和任何实现Iterable接口的对象<br>无法使用for-each循环的情况：<br>过滤，需要遍历集合并删除选定的元素，需要显式的迭代器，以便调用它的remove方法<br>转换，需要遍历列表或者数组，并取代它部分或者全部元素值，需要列表迭代器或者数组索引，以便设定元素的值<br>平行迭代，并行地遍历多个集合，需要显式地控制迭代器或者索引变量，以便所有迭代器和索引变量都可以得到同步前移</p><h3 id="第47条-了解和使用类库（使用标准的工具提高开发效率并更容易维护）"><a href="#第47条-了解和使用类库（使用标准的工具提高开发效率并更容易维护）" class="headerlink" title="第47条 了解和使用类库（使用标准的工具提高开发效率并更容易维护）"></a>第47条 了解和使用类库（使用标准的工具提高开发效率并更容易维护）</h3><p>1、通过使用标准类库，可以充分利用这些编写标准类库专家的知识，以及在你之前的其他人的使用经验。<br>2、不必将你的时间浪费在与你工作基本无关的问题上。与大多数程序员一样，你应该将你的时间放在你的应用研发上，而不是底层细节上。<br>3、无需你的努力去维护，标准类库的性能会随着时间的推迟而改善。因为类库被许多人使用，也因为类库以工作标准基准被使用，所以类库的供应商有着强烈的动机让类库运行得更快。<br>4、可以使你的代码融于主流中，这种类码更易读，更易维护，更易被大多数开发者重用。</p><h3 id="第48条-如果需要精确的答案，请避免使用float和double"><a href="#第48条-如果需要精确的答案，请避免使用float和double" class="headerlink" title="第48条 如果需要精确的答案，请避免使用float和double"></a>第48条 如果需要精确的答案，请避免使用float和double</h3><p>1、float和double类型尤其不适合用于货币计算，因为存在精度丢失，float最多表示8位数，dubbo最多表示16位数<br>2、可以使用bigDecimal、int或者long进行货币计算（BigDecimal不方便而且慢，如果数值范围没有超过9位十进制数字，就可以使用int；如果不超过18位数字，就可以使用long；如果可能超过18位，就必须使用BigDecimal）</p><h3 id="第49条-基本类型优先于装箱基本类型"><a href="#第49条-基本类型优先于装箱基本类型" class="headerlink" title="第49条 基本类型优先于装箱基本类型"></a>第49条 基本类型优先于装箱基本类型</h3><p>基本类型和装箱基本类型之间的三个主要区别：<br>基本类型只有值，而装箱基本类型具有与它们的值不同的同一性（两个装箱基本类型可以具有相同的值和不同的同一性）<br>基本类型只有功能完备的值，而每个装箱基本类型还有个非功能值：null<br>基本类型通常比装箱基本类型更节省空间和时间。</p><h3 id="第50条-如果其他类型更适合，则尽量避免使用字符串"><a href="#第50条-如果其他类型更适合，则尽量避免使用字符串" class="headerlink" title="第50条 如果其他类型更适合，则尽量避免使用字符串"></a>第50条 如果其他类型更适合，则尽量避免使用字符串</h3><p>字符串不适合代替其他的值类型<br>字符串不适合代替枚举类型<br>字符串不适合代替聚合类型（）<br>字符串不适合代替能力表（不重复的唯一KEY）<br>总之：如果有更合适的数据类型，避免使用字符串来表示对象。</p><h3 id="第51条-当心字符串连接的性能"><a href="#第51条-当心字符串连接的性能" class="headerlink" title="第51条 当心字符串连接的性能"></a>第51条 当心字符串连接的性能</h3><p>字符串连接操作符(+),把多个字符串合并成一个字符串的便利方式.但不适合运用在大规模场景<br>不要使用字符串连接操作符进行拼接多个字符串,除非性能无关紧要,<br>要使用StringBuilder的append()方法;或者使用字符串组,或者每次只处理一个字符串,而不是将它们组合起来. </p><h3 id="第52条-通过接口引用对象"><a href="#第52条-通过接口引用对象" class="headerlink" title="第52条 通过接口引用对象"></a>第52条 通过接口引用对象</h3><p>应该优先使用接口而不是类来引用对象，例如Vector的情况。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Subscriber<span class="token operator">></span> subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>Subscriber<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vector<span class="token operator">&lt;</span>Subscriber<span class="token operator">></span> subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>Subscriber<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上，如果使用接口作为类型，程序将会更加灵活，当决定更换实现时，只需改变构造器中的类的名称</p><h3 id="第53条-接口优先于反射机制"><a href="#第53条-接口优先于反射机制" class="headerlink" title="第53条 接口优先于反射机制"></a>第53条 接口优先于反射机制</h3><p>核心反射机制java.lang.reflect提供了“通过程序来访问关于已装载的类的信息”的能力，<br>给定一个Class实例，可以获得Constructor、Method、Field实例，这些对象提供“通过程序来访问类的成员名称、域类型、方法签名等信息”的能力。<br>反射机制允许一个类使用另一个类，即使当前者被编译的时候后者还根本不存在，存在的代价：<br>失去编译时类型检查的好处，包括异常检查。<br>执行反射访问所需的代码冗长。<br>性能上的损失。<br>反射功能只是在设计时被用到。通常，普通应用程序在运行时不应该以反射方式访问对象。</p><p>对于有些程序，必须用到在编译时无法获取的类，但是在编译时存在适当的接口或者超类，通过它们可以引用这个类，<br>就可以以反射的方式创建实例，然后通过它们的接口或者超类，以正常的方式访问这些实例。</p><h3 id="第54条-谨慎地使用本地方法"><a href="#第54条-谨慎地使用本地方法" class="headerlink" title="第54条 谨慎地使用本地方法"></a>第54条 谨慎地使用本地方法</h3><p>本地方法,是指本地程序设计语言(c,或者c++)来编写的特殊方法.<br>本地方法制约跨平台使用的能力.可能对于不同系统的不同版本存在制约问题</p><h3 id="第55条-谨慎地进行优化"><a href="#第55条-谨慎地进行优化" class="headerlink" title="第55条 谨慎地进行优化"></a>第55条 谨慎地进行优化</h3><p>很多计算上的过失都被归咎于效率（没有必要达到的效率），而不是任何其他的原因，——甚至包括盲目地做傻事。<br>　　　　　　　　　　　　　　　　　　　　　 ——William A.Wulf[Wulf72]<br>不要去计校效率上的一些小小的得失，在97％的情况下。不成熟的优化才是一切问题的根源。<br>　　　　　　　　　　　　　　　　　　　　　　——Donald E.Knuth[Knuth74]<br>在优化方面，我们应该遵守两条规则：<br>　　规则1：不要进行优化。<br>　　规则2（仅针对专加）：还是不要进行优化一一也就是说，在你还没有绝对清晰的未优化方案之前，请不要进行优化．<br>　　　　　　　　　　　　　　　　　　　　　　——M.A.Jackson[Jackson75]<br>在每次试图做优化之前和之后，要对性能进行测量：<br>在Java乎台上对优化的结果进行测量，比在其他的传统平台上更有必要。<br>因为Java程序设计语言没有很强的性能模型 ，各种基本操作的相对开销也没有明确定义。<br>努力避免那些限制性能的设计决策  </p><h3 id="第56条-遵守普遍接受的命名惯例"><a href="#第56条-遵守普遍接受的命名惯例" class="headerlink" title="第56条 遵守普遍接受的命名惯例"></a>第56条 遵守普遍接受的命名惯例</h3><p>包的名称：层次状的，句号分隔。包括小写字母和数字（数字很少使用）。域名倒述+模块名。追求简短而有意义的缩写命名方式。只取首字母缩写形似也是可以接受的<br>类和接口的名称：按驼峰命名方式命名，首字母大写<br>方法和域的名称：驼峰命名，首字母小写。（常量域：全部大写，多个单词用下划线隔开）<br>类型参数：<br>            a、执行动作方法常用动词或者动作短语命名<br>            b、对于返回boolean类型的参数，往往以is开头<br>            c、转换类型的方法、返回类型独立对象的方法，通常被称为toType，例如toString和toArray<br>            d、返回视图的方法通常被称为asType。例如asList<br>            e、返回一个与被调对象同值的基本类型的方法，通常被称为typeValue，例如intValue。<br>            f、静态工厂的常用名称为valueOf、of、getInstance、newInstance、getType和NewType<br>T表示任意类型的，E表示集合元素类型，K和V表示映射的键和值类型，X表示异常</p><h2 id="第九章-异常"><a href="#第九章-异常" class="headerlink" title="第九章 异常"></a>第九章 异常</h2><h3 id="第57条-只针对异常的情况才使用异常"><a href="#第57条-只针对异常的情况才使用异常" class="headerlink" title="第57条 只针对异常的情况才使用异常"></a>第57条 只针对异常的情况才使用异常</h3><p>企图利用java的错误判断机制来提高性能是错误的：<br>异常机制设计的初衷是用来处理不正常的情况,所以JVM很少对它们进行优化.<br>代码放在try..catch中反而阻止了jvm本身要执行的某些特定优化<br>对数组进行遍历的标准模式并不会导致冗余的检查<br>总而言之，异常是为了在异常情况下使用而设计的。不要将它们用于普通的控制流，也不要编写迫使他们这么做的API。</p><h3 id="第58条-对可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#第58条-对可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="第58条 对可恢复的情况使用受检异常，对编程错误使用运行时异常"></a>第58条 对可恢复的情况使用受检异常，对编程错误使用运行时异常</h3><p>所有的异常都是从Throwable 的类派生出来的。throwable下面有三种结构：受检异常、运行时异常和错误。<br>受检异常<br>如果期望调用者在遇到异常后可以进行恢复的操作，那么使用受检异常，也就是 xxx extends Exception的异常<br>运行时异常<br>如果不希望调用者进行恢复，想直接中断程序的运行，则抛出运行时异常，也就是 xxx extends RuntimeException的异常。<br>错误<br>Error(错误)表示系统级的错误和程序不必处理的异常，是java运行环境中的内部错误或者硬件问题，比如，内存资源不足、操作系统出错。<br>在大多数情况下，当遇到这样的错误时，建议让该程序中断。这样的异常超出了程序可控制的范围。</p><h3 id="第59条-避免不必要地使用受检的异常"><a href="#第59条-避免不必要地使用受检的异常" class="headerlink" title="第59条 避免不必要地使用受检的异常"></a>第59条 避免不必要地使用受检的异常</h3><p>使用异常可以增加可靠性，但是过分使用异常就会导致问题不断</p><h3 id="第60条-优先使用标准的异常"><a href="#第60条-优先使用标准的异常" class="headerlink" title="第60条 优先使用标准的异常"></a>第60条 优先使用标准的异常</h3><p>专家程序员和普通程序员主要区别在于专家程序员追求并且通常能够实现高度的代码复用.代码复用的通用的规则,异常亦是.<br>复用异常可以增加代码的可读性 ，减少内存印记，减少类装载的开销。<br>所有的错误都可以归结为非法参数和非法状态.<br>异常<br>使用场合<br>IllegalArgumentException<br>参数值不正确<br>IllegalStateException<br>对于方法调用而言，对象状态不合适<br>NullPointerException<br>在禁止使用null的情况下参数值为null<br>IndexOutOfBoundsException<br>下标参数值越界<br>ConcurrentModificationException<br>在禁止并发修改的情况下，检测到对象的并发修改<br>UnsupportedOperationException<br>对象不支持用户请求的方法</p><h3 id="第61条-抛出与抽象相对应的异常"><a href="#第61条-抛出与抽象相对应的异常" class="headerlink" title="第61条 抛出与抽象相对应的异常"></a>第61条 抛出与抽象相对应的异常</h3><p>更高层的实现应该捕获低层的异常，同时抛出可以按照高层抽象进行解释的异常<br>使用异常链来让高层抽象包含低层的异常，便于以后排除问题。</p><h3 id="第62条-每个方法抛出的异常都要有文档"><a href="#第62条-每个方法抛出的异常都要有文档" class="headerlink" title="第62条 每个方法抛出的异常都要有文档"></a>第62条 每个方法抛出的异常都要有文档</h3><p>异常转译：更高层的实现应该捕获低层的异常，同时抛出可以按照高层抽象进行解释的异常。这种做法被称为异常转译<br>可以在给低层传递参数之前，检查更高层方法的参数的有效性，从而避免低层方法抛出异常。（高层检查参数，避免低层异常）<br>如果无法避免低层异常，可以让更高层来悄悄地绕开这些异常，从而将高层方法的调用者与低层的问题隔离开来。使用适当地记录机制来将异常记录下来。（记录低层异常，然后跳过这些异常）<br>除非保证低层方法可以保证他所抛出的所有异常正好对高层也合适，才可以从低层传播到高层</p><h3 id="第63条-在细节消息中包含能捕获失败的信息"><a href="#第63条-在细节消息中包含能捕获失败的信息" class="headerlink" title="第63条 在细节消息中包含能捕获失败的信息"></a>第63条 在细节消息中包含能捕获失败的信息</h3><p>对于程序开发者或者运维人员,异常类型的toString方法应该尽可能返回有关联失败原因的信息,即异常的细节消息应该捕获住失败,便于以后分析.<br>异常细节包含对该异常有用的参数和属性的值<br>新构建的异常类中包含导致此异常原因的属性，抛出(检查or运行)异常时对各个属性赋值足够有价值的数据<br>异常给客户的信息和给开发维护人员的信息不同,给客户信息要求可理解的,给开发人员的信息内容高于可理解</p><h3 id="第64条-努力使失败保持原子性"><a href="#第64条-努力使失败保持原子性" class="headerlink" title="第64条 努力使失败保持原子性"></a>第64条 努力使失败保持原子性</h3><p>当对象抛出异常后,通常期望这个对象仍然保持在一种定义良好的可用状态，即使异常发生在执行某个操作的过程中间.这对于检查时异常尤为重要.因为调用者期望能从异常中进行恢复.<br>如何实现失败原子性呢?<br>对象不可变：第一种最简单的方法设计不可变对象<br>检查参数并抛出适当异常：对于可变对象上执行操作的方法,获得失败原子性最常见的方法是,在执行操作之前检查参数有效性.使得对象状态被改变之前,先抛出适当异常.<br>对象持久化异常回滚：编写一段恢复代码,由它来拦截操作过程中发生的失败,以及使对象回滚到操作开始之前的状态.这种方法主要用于永久性数据结构(存在磁盘中).<br>对象拷贝：在对象的一份临时拷贝上执行操作,当操作完成在用临时性拷贝的结果代替对象的内容.</p><h3 id="第65条-不要忽略异常"><a href="#第65条-不要忽略异常" class="headerlink" title="第65条 不要忽略异常"></a>第65条 不要忽略异常</h3><p>空的catch块会使异常达不到应有的目的.忽视异常如同把火警信号关掉一般<br>最起码catch块中包含一条说明,解释为什么可以忽略此异常<br>是否有情景可以忽略异常呢?<br>   关闭FileInputStream时,可以忽略.因为没有改变文件状态,因此不必进行任何恢复操作;已经从文件中读取所需信息,因此不需要终止进行的操作.</p><h2 id="第十章-并发"><a href="#第十章-并发" class="headerlink" title="第十章 并发"></a>第十章 并发</h2><h3 id="第66条-同步访问共享的可变数据"><a href="#第66条-同步访问共享的可变数据" class="headerlink" title="第66条 同步访问共享的可变数据"></a>第66条 同步访问共享的可变数据</h3><p>关键字synchronized可以保证同一时刻，只有一个线程可以执行某个方法。<br>保证线程安全方法：<br>不要跨线程访问共享变量<br>使共享变量是final类型的（常量）<br>将共享可变数据的操作加上同步<br>当多线程访问可变数据时，每个读或者写的线程都必须执行同步<br>可变数据同步方法：<br>synchronized<br>volatile 共享原子数据，非原子操作也要同步<br>ReentrantLock锁<br>Atomic类<br>并发集合CopyOnWriteList、ConcurrentHashMap、BlockingQueue<br>concurrent框架<br>executor框架</p><h3 id="第67条-避免过度同步"><a href="#第67条-避免过度同步" class="headerlink" title="第67条 避免过度同步"></a>第67条 避免过度同步</h3><p>为了避免活性失败和安全性失败，在一个被同步的方法或者代码块中，永远不要放弃对客户端的控制。<br>：在一个被同步的区域内部，不要调用设计成要被覆盖的方法，或者是由客户端以函数对象的形式提供的方法（不要调用外来的方法，不可控）</p><p>为了避免死锁和数据破坏，千万不要从同步区域内部调用外来方法，要尽量限制同步区域内部的工作量</p><h3 id="第68条-executor和task优先于线程"><a href="#第68条-executor和task优先于线程" class="headerlink" title="第68条 executor和task优先于线程"></a>第68条 executor和task优先于线程</h3><p>如果想让不止一个线程来处理来自这个队列的请求，只要调用一个不同的静态工厂，这个工厂创建了一种不同的executor service，称作线程池。你可以用固定或者可变的数目的线程来创建一个线程池。<br>在大负载的产品服务中，最好使用Executors.newFixedThreadPool，它为你提供一个包含固定线程数目的线程池.要想最大限度的控制它，就直接使用ThreadPoolExecutor类。</p><h3 id="第69条-并发工具优先于wait和notify"><a href="#第69条-并发工具优先于wait和notify" class="headerlink" title="第69条 并发工具优先于wait和notify"></a>第69条 并发工具优先于wait和notify</h3><p>在java.util.conturrent包中更高级的并发工具分成三类：Executor Framework,并发集合（Concurrent Collection）以及同步器（Synchronizer）.<br>ConcurrentMap除了提供了卓越的并发性外，速度也是非常快的。除非不得已，我们应当优先使用ConcurrentHashMap而不是Collections.synchronizedMap或者Hashtable。<br>线程不安全的HashMap<br>效率低下的hashtable 的容器：HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态，使用synchronized来保证线程安全，如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。<br>ConcurrentHashMap：分段锁技术（HashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术）</p><p>wait(): 让线程处于冻结状态，被wait的线程会被存储到线程池中。wait方法被用来使线程等待某个条件。它必须在同步区域内被调用。<br>notify()：唤醒线程池中一个线程(任意),没有顺序。<br>notifyAll()：唤醒线程池中的所有线程。</p><h3 id="第70条-线程安全性的文档化"><a href="#第70条-线程安全性的文档化" class="headerlink" title="第70条 线程安全性的文档化"></a>第70条 线程安全性的文档化</h3><p>线程安全性的几种级别：<br>不可变的：这个类的实例是不变的，所以不需要外部同步。例如 String、Biginter、Long<br>无条件的线程安全：这个类的实例是可变的，但是这个类有着足够的内部同步，所以它的实例可以被并发使用，无需任何外部同步。例如 Random和ConcurrentHashMap<br>有条件的线程安全：除了有些方法为进行安全的并发而需要使用外部同步之外（这是它的条件），这种线程安全和无条件的线程安全级别完全相同。例如：Collenctions.synchronized包装返回的集合，它们的迭代器要求外部同步<br>非线程安全：这个实例是可变的。为了并发的使用他们，客户必须利用自己选择的外部同步包围每个方法调用（或者调用序列）。例如:ArrayList和HashMap<br>线程对立的(thread-hostie)：这个类不能安全地被多个线程并发使用，即使所有的方法调用都被外部同步包围。</p><h3 id="第71条-慎用延迟初始化"><a href="#第71条-慎用延迟初始化" class="headerlink" title="第71条 慎用延迟初始化"></a>第71条 慎用延迟初始化</h3><p>延迟初始化：延迟到需要域的值时才将它初始化的这种行为<br>延迟初始化就像一把双刃剑，它降低了初始化类或者创建实例的开销，却增加了访问被延迟初始化的域的开销。<br>根据延迟初始化的域最终需要初始化的比例、初始化这些 域要多少开销，以及每个域多久被访问一次，延迟初始化（就像其他的许多优化一样）实际上降低了性能</p><p>延迟初始化有它的好处。如果域只在类的实例部分被访问，井且初始化这个域的开销很高，可能就值得进行延迟初始化。要确定这一点，唯一的办法就是测量类在用和不用延迟初始化时的性能差别。<br>多线程初始化要慎重：当有多个线程时，延迟初始化是需要技巧的。如果两个或者多个线程共享一个延迟初始化的域，采用某种形式的同步是很重要的，否则就可能造成严重的Bug。<br>静态域考虑使用延迟加载模式：如果出于性能的考虑而需要对静态域使用延迟初始化，就使用 lazy initialization holder class模式。这种模式保证了类要到被用到的时候才会被初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">fieldHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> FieldType field <span class="token operator">=</span> <span class="token function">computeFieldValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> FiledType <span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> FieldHolder<span class="token punctuation">.</span>field<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第72条-不要依赖于线程调度器"><a href="#第72条-不要依赖于线程调度器" class="headerlink" title="第72条 不要依赖于线程调度器"></a>第72条 不要依赖于线程调度器</h3><p>简单理解：决定哪些线程将会运行，不能依赖于操作系统的策略做到公正。这样的程序很可能是不能移植的。<br>当有多个线程可以运行时，由线程调度器决定哪些线程将会运行，以及运行多长时间。任何一个合理的操作系统在做出这样的决定时，都会努力做到公正，<br>但是所有操作系统的竞争策略却大相径庭。因此，编写良好的程序不应该依赖于这种策略的细节。<br>任何依赖于线程调度器来达到正确性或者性能要求的程序，很有可能是不可移植的。线程优先级是Java平台上最不可移植的特征。</p><h3 id="第73条-避免使用线程组"><a href="#第73条-避免使用线程组" class="headerlink" title="第73条 避免使用线程组"></a>第73条 避免使用线程组</h3><p>线程组并没有提供太多有用的功能，而且他们提供的很多线程组还都是有缺陷的。<br>我们最好把线程组看成是一个不成功的试验。你可以忽略掉他们，就当他们根本不存在一样。<br>如果你正在设计的一个类需要处理线程的逻辑组，或许就应该使用线程池executor。</p><h2 id="第十一章-序列化"><a href="#第十一章-序列化" class="headerlink" title="第十一章 序列化"></a>第十一章 序列化</h2><h3 id="第74条-谨慎地实现Serializable接口"><a href="#第74条-谨慎地实现Serializable接口" class="headerlink" title="第74条 谨慎地实现Serializable接口"></a>第74条 谨慎地实现Serializable接口</h3><p>代价一：失去灵活性<br>如果一个类实现了Serializable接口。它的字节流编码(或者说序列化形式，serialized form)就变成了它的导出的API的一部分</p><p>代价二：安全漏洞<br>增加了bug和安全漏洞的可能性。通常情况下，对象是利用构造器来构建的。序列化机制是一种语言之外的对象创建机制。<br>无论你是接受了默认的行为，还是覆盖了默认的行为，反序列化机制都是一个“隐藏的构造器”，具备与其他构造器相同的特点。</p><p>值类或集合类可考虑实现Serializable<br>实现Serializable接口 提供了一些实在的益处: 如果一个类将要加人到某个框架中，并且该框架依赖于序列化来实现对象传输或者持久化，对于这个类来说，实现Serializable接口就非常有必要。<br>比如Date和BigInteger这样的值类，还有大多数的集合类。代表活动实体的类，比如线程池，一般不应该实现serializable</p><h3 id="第75条-考虑使用自定义的序列化形式"><a href="#第75条-考虑使用自定义的序列化形式" class="headerlink" title="第75条 考虑使用自定义的序列化形式"></a>第75条 考虑使用自定义的序列化形式</h3><p>如果没有先认真考虑默认的序列化形式是否合适，则不要贸然接受。</p><h3 id="第76条-保护性地编写readObject方法"><a href="#第76条-保护性地编写readObject方法" class="headerlink" title="第76条 保护性地编写readObject方法"></a>第76条 保护性地编写readObject方法</h3><p>每当你编写readObject方法的时候，都要这样想：你正在编写一个公有的构造器，无论给它传递什么样的字节流，它都必须产生一个有效的实例。不要<br>假设这个字节流一定代表着一个真正被序列化过的实例。<br>对象引用域必须保持为私有的类，要保护性地拷贝这些域中的每个对象。<br>对于任何约束条件，如果检查失败，则抛出一个InvalidObjectException异常。</p><h3 id="第77条-对于实例控制，枚举类型优先于readResolve"><a href="#第77条-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="第77条 对于实例控制，枚举类型优先于readResolve"></a>第77条 对于实例控制，枚举类型优先于readResolve</h3><p>transient：不需要序列化的字段注解<br>如果依赖readResolve进行实例控制，带有对象引用类型的所有实例域则都必须声明为transient的。<br>你应该尽可能地使用枚举类型来实施实例控制的约束条件。如果做不到，同时又需要一个既可序列化又是实例受控的类，<br>就必须提供一个readResolve方法，并确保该类的所有实例域都为基本类型，或者是transient的</p><h3 id="第78条-考虑用序列化代理代替序列化实例"><a href="#第78条-考虑用序列化代理代替序列化实例" class="headerlink" title="第78条 考虑用序列化代理代替序列化实例"></a>第78条 考虑用序列化代理代替序列化实例</h3><p>实现java.io.Serializable接口, 会增加出错和出现安全问题的可能性, 因为它开放了实例的另一种来源 —- 反序列化. 有一种方法可以减少风险, 那就是序列化代理模式.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> String hobby<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String hobby<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hobby<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobby</span><span class="token punctuation">(</span>String hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> Object <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person.writeReplace()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersonProxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PersonProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> String hobby<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">PersonProxy</span><span class="token punctuation">(</span>Person original<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PersonProxy(Person original)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PersonProxy.readResolve()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hobby<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resolveObject: "</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> person<span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"足球"</span> <span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"serial.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"serial.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person deserPerson <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main: "</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>person <span class="token operator">==</span> deserPerson<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化前后是同一个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//反序列化会创建对象, 但是不会执行类的构造方法, 而是使用输入流构造对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化前后不是同一个对象, 哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1、序列化对象时  会调用writeReplace()生成一个PersonProxy对象，然后对此对象进行序列化<br>2、反序列化时，会调用PersonProxy的readResolve()方法生成一个Person对象<br>3、Person类的序列化工作完全交给PersonProxy类</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道</title>
      <link href="/2019/10/10/bian-cheng-zhi-dao/dai-ma-zheng-ji-zhi-dao-nei-rong-gai-yao/"/>
      <url>/2019/10/10/bian-cheng-zhi-dao/dai-ma-zheng-ji-zhi-dao-nei-rong-gai-yao/</url>
      
        <content type="html"><![CDATA[<p>读了代码整洁之道，觉得这本书写的很好，所以就将里面自己觉得很经典的内容记录下来，作为自己以后写代码的标准和准则。同时也为那些曾经困惑过的人一点参考吧！</p><h2 id="一、在正式开始之前，我们先思考几个几个问题："><a href="#一、在正式开始之前，我们先思考几个几个问题：" class="headerlink" title="一、在正式开始之前，我们先思考几个几个问题："></a>一、在正式开始之前，我们先思考几个几个问题：</h2><h3 id="1-需求与代码哪个重要？"><a href="#1-需求与代码哪个重要？" class="headerlink" title="1.需求与代码哪个重要？"></a>1.需求与代码哪个重要？</h3><p>答：并不是所有的产品都能提出合理的需求，当你面对一个提出不合理需求的产品的时候，你需要坚持自己的原则，不能妥协。</p><h3 id="2-易读和易懂是一回事吗？"><a href="#2-易读和易懂是一回事吗？" class="headerlink" title="2.易读和易懂是一回事吗？"></a>2.易读和易懂是一回事吗？</h3><p>答：易读的代码和易懂的代码是有区别的，不是易读的代码就是易懂的代码。</p><h3 id="3-什么是测试驱动代码？"><a href="#3-什么是测试驱动代码？" class="headerlink" title="3.什么是测试驱动代码？"></a>3.什么是测试驱动代码？</h3><p>答：测试驱动代码，你写的代码要可以执行单元测试。如果你发现你的代码很难写单元测试，那么你就要思考你的代码是不是已经不整洁了，或者说已经乱成一团了。</p><h3 id="4-什么是简单的代码？"><a href="#4-什么是简单的代码？" class="headerlink" title="4.什么是简单的代码？"></a>4.什么是简单的代码？</h3><p>答：<br>1.能通过所有测试<br>2.没有重复代码<br>3.体现系统中全部设计理念<br>4.包含尽量少的实体，包括，类，函数，方法等</p><p>如果某段代码在程序设计中反复出现，就证明想法在代码中没有很好的体现出来。总之，不要重复代码，只做一件事，表达力，小规模抽象。</p><h2 id="二、第二章-有意义的命名"><a href="#二、第二章-有意义的命名" class="headerlink" title="二、第二章 有意义的命名"></a>二、第二章 有意义的命名</h2><h3 id="1-名副其实"><a href="#1-名副其实" class="headerlink" title="1.名副其实"></a>1.名副其实</h3><p>变量，函数或类的名称应该已经答复了所有的大问题。它应该告诉你，它为什么会存在，它做什么事情，应该怎么用。如果名称需要注释来补充，那么就不算名副其实。</p><h3 id="2-避免误导"><a href="#2-避免误导" class="headerlink" title="2.避免误导"></a>2.避免误导</h3><p>必须避免留下掩藏代码本意的错误线索。</p><h3 id="3-做有意义的区分"><a href="#3-做有意义的区分" class="headerlink" title="3.做有意义的区分"></a>3.做有意义的区分</h3><p>只要体现出有意义的区分，使用a和the这样的前缀就没有错。废话就是冗余。</p><h3 id="4-使用读得出来的名称"><a href="#4-使用读得出来的名称" class="headerlink" title="4.使用读得出来的名称"></a>4.使用读得出来的名称</h3><p>不要用傻乎乎的自造词，而不是恰当的英语词。</p><h3 id="5-使用可搜索的名称"><a href="#5-使用可搜索的名称" class="headerlink" title="5.使用可搜索的名称"></a>5.使用可搜索的名称</h3><p>使用便于搜索的名字。</p><h3 id="6-避免使用编码"><a href="#6-避免使用编码" class="headerlink" title="6.避免使用编码"></a>6.避免使用编码</h3><p>把类型或者作用域编进名称里面，徒然增加了解码的负担。没理由要求每位新人都在弄清要应付的代码之外，还要再搞懂另一种编码”语言”。</p><h3 id="7-避免思维映射"><a href="#7-避免思维映射" class="headerlink" title="7.避免思维映射"></a>7.避免思维映射</h3><p>不应当让读者在脑中把你的名称翻译为他们熟知的名称，尤其是在经常出现在选择是使用问题领域术语还是解决方案领域术语的时候。</p><h3 id="8-类名或对象名最好使用名词或者名词短语"><a href="#8-类名或对象名最好使用名词或者名词短语" class="headerlink" title="8.类名或对象名最好使用名词或者名词短语"></a>8.类名或对象名最好使用名词或者名词短语</h3><h3 id="9-方法名最好使用动词或者动词短语"><a href="#9-方法名最好使用动词或者动词短语" class="headerlink" title="9.方法名最好使用动词或者动词短语"></a>9.方法名最好使用动词或者动词短语</h3><h3 id="10-别扮可爱"><a href="#10-别扮可爱" class="headerlink" title="10.别扮可爱"></a>10.别扮可爱</h3><p>命名一定要通俗易懂。</p><h3 id="11-每一个概念对应一个词"><a href="#11-每一个概念对应一个词" class="headerlink" title="11.每一个概念对应一个词"></a>11.每一个概念对应一个词</h3><p>给每个抽象概念选择一个词，并一以贯之</p><h3 id="12-别用双关语词"><a href="#12-别用双关语词" class="headerlink" title="12.别用双关语词"></a>12.别用双关语词</h3><p>避免将同一个词用于不同目的，遵循一词一义的原则</p><h3 id="13-使用解决方案领域名"><a href="#13-使用解决方案领域名" class="headerlink" title="13.使用解决方案领域名"></a>13.使用解决方案领域名</h3><h3 id="14-使用源自所涉领域名"><a href="#14-使用源自所涉领域名" class="headerlink" title="14.使用源自所涉领域名"></a>14.使用源自所涉领域名</h3><h3 id="15-添加有意义的语境"><a href="#15-添加有意义的语境" class="headerlink" title="15.添加有意义的语境"></a>15.添加有意义的语境</h3><p>在一个bean中定义变量名的时候，变量名一定是基于实际使用场景。</p><h3 id="16-不要添加没用的语境"><a href="#16-不要添加没用的语境" class="headerlink" title="16.不要添加没用的语境"></a>16.不要添加没用的语境</h3><h2 id="三、第三章-函数"><a href="#三、第三章-函数" class="headerlink" title="三、第三章 函数"></a>三、第三章 函数</h2><h3 id="1-短小"><a href="#1-短小" class="headerlink" title="1.短小"></a>1.短小</h3><p>函数第一规则是要短小。第二条规则是还要更短小。</p><h3 id="2-只做一件事"><a href="#2-只做一件事" class="headerlink" title="2.只做一件事"></a>2.只做一件事</h3><ul><li>函数应该做一件事。做好这件事。只做一件事。如果可以从你的函数中还能拆分出一个函数，该函数不仅只是单纯地重新诠释其实现，那么你设计的函数就不是一个好的函数。</li><li>函数中的区段，如果函数被切分了多个区段，这就证明该函数做的事情太多了。</li></ul><h3 id="3-每个函数一个抽象层级"><a href="#3-每个函数一个抽象层级" class="headerlink" title="3.每个函数一个抽象层级"></a>3.每个函数一个抽象层级</h3><h3 id="4-switch语句"><a href="#4-switch语句" class="headerlink" title="4.switch语句"></a>4.switch语句</h3><p>确保每个switch都埋藏在较低的抽象层级，而且永远不重复。</p><h3 id="5-使用描述性的名称"><a href="#5-使用描述性的名称" class="headerlink" title="5.使用描述性的名称"></a>5.使用描述性的名称</h3><p>命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给函数命名。例如：includeSetupPages。</p><h3 id="6-函数参数"><a href="#6-函数参数" class="headerlink" title="6.函数参数"></a>6.函数参数</h3><ul><li>最理想的函数参数的数量是零个，其次是一，再次是二，应尽量避免三。有足够的理由才能用上三个以上的参数。</li><li>如果函数看来需要两个，三个或者三个以上参数，就说明其中一些参数应该封装为类了。</li><li>函数和函数的参数命名一般是动名词比较好。</li></ul><h3 id="7-无副作用"><a href="#7-无副作用" class="headerlink" title="7.无副作用"></a>7.无副作用</h3><h3 id="8-分割指令与查询"><a href="#8-分割指令与查询" class="headerlink" title="8.分割指令与查询"></a>8.分割指令与查询</h3><p>函数要么做什么事，要么回答什么事，但二者不可兼得</p><h3 id="9-使用异常替代返回错误码"><a href="#9-使用异常替代返回错误码" class="headerlink" title="9.使用异常替代返回错误码"></a>9.使用异常替代返回错误码</h3><ul><li>返回错误码的时候，就是在要求调用者立刻处理错误。</li><li>如果使用异常替代返回错误码，错误处理代码就能从住路径代码中分离出来，得到简化。</li><li>抽离try/catch代码块</li></ul><h3 id="10-别重复自己"><a href="#10-别重复自己" class="headerlink" title="10.别重复自己"></a>10.别重复自己</h3><h3 id="11-结构化编程"><a href="#11-结构化编程" class="headerlink" title="11.结构化编程"></a>11.结构化编程</h3><h2 id="四、第四章-注释"><a href="#四、第四章-注释" class="headerlink" title="四、第四章 注释"></a>四、第四章 注释</h2><h3 id="1-如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。"><a href="#1-如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。" class="headerlink" title="1.如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。"></a>1.如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。</h3><h3 id="2-真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？"><a href="#2-真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？" class="headerlink" title="2.真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？"></a>2.真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？</h3><ul><li>法律信息</li><li>提供信息的注释</li><li>提供意图的解释</li><li>阐释</li><li>警告</li><li>TODO注释</li><li>TODO是一种程序要认为应该要做的，但是由于某种原因没有做的</li><li>放大,放大某些看似不合理的地方</li></ul><h2 id="五、第六章-对象和数据结构"><a href="#五、第六章-对象和数据结构" class="headerlink" title="五、第六章 对象和数据结构"></a>五、第六章 对象和数据结构</h2><h3 id="1-得墨忒定律"><a href="#1-得墨忒定律" class="headerlink" title="1.得墨忒定律"></a>1.得墨忒定律</h3><p>模块不应该了解他所操作对象的内部情形。对象隐藏数据曝露操作，这就意味着对象不应该通过存取器曝露其内部结构。</p><h2 id="六、第七章-错误处理"><a href="#六、第七章-错误处理" class="headerlink" title="六、第七章 错误处理"></a>六、第七章 错误处理</h2><h3 id="1-将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。"><a href="#1-将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。" class="headerlink" title="1.将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。"></a>1.将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。</h3><h3 id="2-异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。"><a href="#2-异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。" class="headerlink" title="2.异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。"></a>2.异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。</h3><h2 id="七、第八章-边界"><a href="#七、第八章-边界" class="headerlink" title="七、第八章 边界"></a>七、第八章 边界</h2><h3 id="1-整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。"><a href="#1-整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。" class="headerlink" title="1.整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。"></a>1.整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。</h3><h2 id="八、第九章-单元测试"><a href="#八、第九章-单元测试" class="headerlink" title="八、第九章 单元测试"></a>八、第九章 单元测试</h2><h3 id="1-TDD三定律"><a href="#1-TDD三定律" class="headerlink" title="1.TDD三定律"></a>1.TDD三定律</h3><ul><li>在编写不能通过的单元测试前，不可编写生产代码。</li><li>只可编写刚好无法通过的单元测试，不能编译也算不通过</li><li>只可编写刚好足以通过当前失败测试的生产代码</li></ul><h3 id="2-整洁测试三要素"><a href="#2-整洁测试三要素" class="headerlink" title="2.整洁测试三要素"></a>2.整洁测试三要素</h3><ul><li>可读性</li><li>可读性</li><li>可读性</li></ul><h3 id="3-整洁测试的五条原则："><a href="#3-整洁测试的五条原则：" class="headerlink" title="3.整洁测试的五条原则："></a>3.整洁测试的五条原则：</h3><ul><li>快速，测试应该够快</li><li>独立，测试应该相互独立</li><li>可重复，测试应当可在任何环境中重复通过。</li><li>自足验证，测试应该有布尔值输出，无论测试是成功还是失败，不应该人工通过log来确认测试是否成功或者失败。</li><li>及时，测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。如果在编写生产代码之后编写测试，你会发现生产代码难以测试。你可能会认为某些生产代码本身难以测试。你可能不会去设计可测试的代码。</li></ul><h2 id="九、第十章-类"><a href="#九、第十章-类" class="headerlink" title="九、第十章 类"></a>九、第十章 类</h2><h3 id="1-单一权责原则，类或者模块应有且只有一条加以修改的理由。"><a href="#1-单一权责原则，类或者模块应有且只有一条加以修改的理由。" class="headerlink" title="1.单一权责原则，类或者模块应有且只有一条加以修改的理由。"></a>1.单一权责原则，类或者模块应有且只有一条加以修改的理由。</h3><h3 id="2-内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。"><a href="#2-内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。" class="headerlink" title="2.内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。"></a>2.内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。</h3><h2 id="十、第十一章-系统"><a href="#十、第十一章-系统" class="headerlink" title="十、第十一章 系统"></a>十、第十一章 系统</h2><h3 id="1-将系统的构造与使用分开"><a href="#1-将系统的构造与使用分开" class="headerlink" title="1.将系统的构造与使用分开"></a>1.将系统的构造与使用分开</h3><p>软件系统应将起始过程和启始过程之后的运行时逻辑分离开，在起始过程中构建应用对象，也会存在相互缠结的依赖关系。（延迟初始化可以加快程序运行速度）</p><h4 id="1-1分解main"><a href="#1-1分解main" class="headerlink" title="1.1分解main"></a>1.1分解main</h4><p>将程序的构造放到main，并使其与运行时逻辑分开，main只管构造并将构造后的数据对象发送给各个应用，或者被各个应用使用。但是，不参与运行时的任何逻辑控制。</p><h4 id="1-2工厂模式"><a href="#1-2工厂模式" class="headerlink" title="1.2工厂模式"></a>1.2工厂模式</h4><p>使用该模式可以将系统构造和系统运行时逻辑分开。</p><h4 id="1-3依赖注入（需要强化理解）"><a href="#1-3依赖注入（需要强化理解）" class="headerlink" title="1.3依赖注入（需要强化理解）"></a>1.3依赖注入（需要强化理解）</h4><h4 id="1-4扩容"><a href="#1-4扩容" class="headerlink" title="1.4扩容"></a>1.4扩容</h4><p>“一开始就做对系统”纯属神话。反之，我们应该只去实现今天的用户故事，然后重构，明天再扩展系统，实现新用户的故事。这就是迭代和增量敏捷的精髓所在。测试驱动开发，重构以及他们打造出的整洁的代码。</p><h4 id="1-5测试驱动系统架构"><a href="#1-5测试驱动系统架构" class="headerlink" title="1.5测试驱动系统架构"></a>1.5测试驱动系统架构</h4><p>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯编程语言对象实现。不同的领域之间用最不具有侵害性的方面或类方面工具结合起来。这种架构就能测试驱动，就像代码一样。(需要关注面向切片编程(POJO))</p><h4 id="1-6优化决策"><a href="#1-6优化决策" class="headerlink" title="1.6优化决策"></a>1.6优化决策</h4><p>模块化和关注面切分成就了分散化管理和决策。在巨大的系统中，不管是一座城市或是一个软件项目，无人能做所有的决策。最好是授权给最有资格的人。拥有模块化关注面的POJO系统提供的敏捷能力，允许我们基于最新的知识做出优化的，时机刚好的决策。决策的复杂性降低了。</p><h2 id="十一、第十二章-迭进"><a href="#十一、第十二章-迭进" class="headerlink" title="十一、第十二章 迭进"></a>十一、第十二章 迭进</h2><h3 id="1-通过迭进设计达到代码整洁的目的："><a href="#1-通过迭进设计达到代码整洁的目的：" class="headerlink" title="1. 通过迭进设计达到代码整洁的目的："></a>1. 通过迭进设计达到代码整洁的目的：</h3><p>通过这几个原则可以让你的设计变简单（DIP，SRP）</p><ul><li>运行所有测试</li><li>不可重复，</li><li>表达了程序员的意图</li><li>尽可能减少类和方法的数量</li><li>以上规则按其重要程度排序</li></ul><h3 id="2-简单设计规则1-运行所有测试"><a href="#2-简单设计规则1-运行所有测试" class="headerlink" title="2. 简单设计规则1:运行所有测试"></a>2. 简单设计规则1:运行所有测试</h3><p>编写的测试越多就越能持续走向编写较易测试的代码，紧耦合的代码很难编写测试。遵循有关编写测试并持续运行测试的简单，明确的规则，系统就会更贴近OO低耦合度，高内聚度的目标。编写测试引致更好的设计。</p><h3 id="3-简单设计规则2-4：重构"><a href="#3-简单设计规则2-4：重构" class="headerlink" title="3. 简单设计规则2-4：重构"></a>3. 简单设计规则2-4：重构</h3><p>在重构过程中，可以应用有关优秀软件设计的一切知识。提升内聚性，降低耦合度，切分关注面，模块化系统性关注面，缩小函数和类的尺寸，选用更好的名称，如此等等。这也是简单设计原则后三条规则的地方:消除重复，保证表达力，尽可能减少类和方法的数量。</p><h3 id="4-不可重复"><a href="#4-不可重复" class="headerlink" title="4. 不可重复"></a>4. 不可重复</h3><h3 id="5-表达力"><a href="#5-表达力" class="headerlink" title="5. 表达力"></a>5. 表达力</h3><h3 id="6-尽可能少的类和方法"><a href="#6-尽可能少的类和方法" class="headerlink" title="6. 尽可能少的类和方法"></a>6. 尽可能少的类和方法</h3><h2 id="十二、第十三章-并发编程"><a href="#十二、第十三章-并发编程" class="headerlink" title="十二、第十三章 并发编程"></a>十二、第十三章 并发编程</h2><h3 id="1-为什么要并发"><a href="#1-为什么要并发" class="headerlink" title="1. 为什么要并发"></a>1. 为什么要并发</h3><p>并发是一种解耦策略。它帮我们把做什么和何时做分解开。</p><h3 id="2-并发的防御原则"><a href="#2-并发的防御原则" class="headerlink" title="2. 并发的防御原则"></a>2. 并发的防御原则</h3><h3 id="13-1-单一权责原则（SRP）"><a href="#13-1-单一权责原则（SRP）" class="headerlink" title="13.1 单一权责原则（SRP）"></a>13.1 单一权责原则（SRP）</h3><p>并发代码应该从其他代码中分离出来，因为，并发代码相比于其他的代码是很复杂的存在。但是，并发实现细节常常直接嵌入到其他生产代码中。那么下面几个问题需要考虑，</p><ul><li>并发相关代码由自己的开发，修改和调优生命周期</li><li>开发相关代码由自己要对付的挑战，和非并发相关代码不同，而且往往更为困难</li><li>即便没有周边应用程序增加负担，写得不好的并发代码可能的出错方式数量已经足具挑战性。</li></ul><blockquote><p>建议：分离并发相关代码与其他代码。</p></blockquote><h3 id="13-2-限制数据作用域"><a href="#13-2-限制数据作用域" class="headerlink" title="13.2 限制数据作用域"></a>13.2 限制数据作用域</h3><p>两个线程修改共享对象的同一字段时，可能相互干扰，导致未预期的行为。解决方案之一是采用<code>synchronized</code>关键字在代码中保护一块使用共享对象的临界区。限制临界区的数量很重要。更新共享数据的地方越多，就越可能出错。</p><blockquote><p>建议：谨记数据封装，严格限制对可能被共享的数据的访问。</p></blockquote><h3 id="13-3-使用数据副本"><a href="#13-3-使用数据副本" class="headerlink" title="13.3 使用数据副本"></a>13.3 使用数据副本</h3><p>避免共享数据的好方法之一就是一开始就避免共享数据。在某些情况下，有可能复制对象并以只读方式对待。在另外一种情况下，有可能复制对象，从多个线程收集所有副本的结果，并在单个线程中合并这些结果。</p><h3 id="13-4-线程尽可能地独立"><a href="#13-4-线程尽可能地独立" class="headerlink" title="13.4　线程尽可能地独立"></a>13.4　线程尽可能地独立</h3><p>让每个线程在自己的世界中存在，不与其他线程共享数据。每个线程处理一个客户端请求，从不共享的源头接纳所有请求数据，存储为本地变量。</p><p>建议：尝试将数据分解到可被独立线程操作的独立子集。</p><h3 id="13-5-了解执行模型"><a href="#13-5-了解执行模型" class="headerlink" title="13.5 了解执行模型"></a>13.5 了解执行模型</h3><h4 id="13-5-1-生产者－－－消费者模型"><a href="#13-5-1-生产者－－－消费者模型" class="headerlink" title="13.5.1 生产者－－－消费者模型"></a>13.5.1 生产者－－－消费者模型</h4><p>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。</p><h4 id="13-5-2-读者－－－作者模型"><a href="#13-5-2-读者－－－作者模型" class="headerlink" title="13.5.2 读者－－－作者模型"></a>13.5.2 读者－－－作者模型</h4><p>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的积累。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的消息，这是一种辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。</p><p>挑战之处在于平衡读者线程和作者线程的需求，实现正确的操作，提供合理的吞吐量，避免线程饥饿。</p><h4 id="13-5-3哲学家问题（故事内容不在这里描述）"><a href="#13-5-3哲学家问题（故事内容不在这里描述）" class="headerlink" title="13.5.3哲学家问题（故事内容不在这里描述）"></a>13.5.3哲学家问题（故事内容不在这里描述）</h4><p>从哲学家问题可以反映出编写并发经常遇到的问题，死锁，活锁，吞吐量和效率降低等问题。那么学习这些基础问题的解决算法可以帮助你解决大多数的并发问题，因为大多的并发问题都是上述问题的变种。</p><h3 id="13-6-警惕同步方法之间的依赖"><a href="#13-6-警惕同步方法之间的依赖" class="headerlink" title="13.6 警惕同步方法之间的依赖"></a>13.6 警惕同步方法之间的依赖</h3><p>同步方法之间的依赖会导致并发代码中的狡猾缺陷。Java语言有synchronized概念，可以用来保护单个方法。然而，如果在同一共享类中由多个同步方法，系统就可能写得不太正确了。</p><blockquote><p>建议：避免使用一个共享对象的多个方法。如果有时必须使用一个共享对象的多个方法。这种情况发生时，有３中写对代码的手段：</p></blockquote><ul><li>基于客户端的锁定－－客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。</li><li>基于服务端的锁定－－在服务端内创建锁定服务端的方法，调用所有方法，然后解锁。让客户端代码调用新的方法。</li><li>适配服务端－－创建执行锁定的中间层。这是一种基于服务端的锁定例子，但不修改原始服务端代码。</li></ul><h3 id="13-7保持同步区域微小"><a href="#13-7保持同步区域微小" class="headerlink" title="13.7保持同步区域微小"></a>13.7保持同步区域微小</h3><p>应该尽可能少地设计临界区，如果有请尽可能减小同步区域。</p><h3 id="13-8-编写线程需要注意的几点："><a href="#13-8-编写线程需要注意的几点：" class="headerlink" title="13.8　编写线程需要注意的几点："></a>13.8　编写线程需要注意的几点：</h3><h4 id="1-将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。"><a href="#1-将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。" class="headerlink" title="(1). 将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。"></a>(1). 将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。</h4><h4 id="2-先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。"><a href="#2-先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。" class="headerlink" title="(2). 先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。"></a>(2). 先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。</h4><h4 id="3-编写可插拔的线程代码。编写在数个环境下运行的线程代码"><a href="#3-编写可插拔的线程代码。编写在数个环境下运行的线程代码" class="headerlink" title="(3). 编写可插拔的线程代码。编写在数个环境下运行的线程代码"></a>(3). 编写可插拔的线程代码。编写在数个环境下运行的线程代码</h4><ul><li>1.单线程与多线程在执行时不同的情况</li><li>2.线程代码与实物或测试替身互动</li><li>3.用运行速度,缓慢和有变动的测试替身执行</li><li>4.将测试配置为能运行一定数量的迭代</li></ul><blockquote><p>建议：编写可插拔的线程代码，这样就能在不同的配置环境下运行。</p></blockquote><h4 id="4-编写可调整的线程代码"><a href="#4-编写可调整的线程代码" class="headerlink" title="(4). 编写可调整的线程代码"></a>(4). 编写可调整的线程代码</h4><p>在系统运行时允许线程发生变动。允许线程依据吞吐量和使用率自我调整。</p><h4 id="5-运行多余处理器数量的线程"><a href="#5-运行多余处理器数量的线程" class="headerlink" title="(5). 运行多余处理器数量的线程"></a>(5). 运行多余处理器数量的线程</h4><p>任务交换越频繁，越有可能找到错过临界区或导致死锁的代码。</p><h4 id="6-在不同平台上运行"><a href="#6-在不同平台上运行" class="headerlink" title="(6). 在不同平台上运行"></a>(6). 在不同平台上运行</h4><h4 id="7-调整代码并强迫错误发生"><a href="#7-调整代码并强迫错误发生" class="headerlink" title="(7). 调整代码并强迫错误发生"></a>(7). 调整代码并强迫错误发生</h4><h2 id="十三、第14章-逐步改进"><a href="#十三、第14章-逐步改进" class="headerlink" title="十三、第14章 逐步改进"></a>十三、第14章 逐步改进</h2><p>代码并不是一次就能写的很干净的，需要我们不断的迭代和优化。</p><h2 id="十四、第17章-味道与启发"><a href="#十四、第17章-味道与启发" class="headerlink" title="十四、第17章 味道与启发"></a>十四、第17章 味道与启发</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h3><h4 id="1-不恰当的注释信息"><a href="#1-不恰当的注释信息" class="headerlink" title="(1). 不恰当的注释信息"></a>(1). 不恰当的注释信息</h4><p>让注释传达本该更好地在源代码控制系统，问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。例如，修改历史记录只会用大量过时而无趣的文本搞乱源代码文件。注释只应该描述有关代码和设计的技术性信息。</p><h4 id="2-废弃的注释"><a href="#2-废弃的注释" class="headerlink" title="(2). 废弃的注释"></a>(2). 废弃的注释</h4><p>过时，无关或不正确的注释就是废弃的注释。</p><h4 id="3-冗余注释"><a href="#3-冗余注释" class="headerlink" title="(3). 冗余注释"></a>(3). 冗余注释</h4><p>如果注释描述的是某种充分自我描述了的东西，那么注释就是多余的。注释应该谈及代码自身没有提到的东西。</p><h4 id="4-注释要写就要写最好的注释，别画蛇添足"><a href="#4-注释要写就要写最好的注释，别画蛇添足" class="headerlink" title="(4). 注释要写就要写最好的注释，别画蛇添足"></a>(4). 注释要写就要写最好的注释，别画蛇添足</h4><h4 id="5-注释掉的代码，看到注释掉的代码就删。"><a href="#5-注释掉的代码，看到注释掉的代码就删。" class="headerlink" title="(5). 注释掉的代码，看到注释掉的代码就删。"></a>(5). 注释掉的代码，看到注释掉的代码就删。</h4><h3 id="2-环境"><a href="#2-环境" class="headerlink" title="2. 环境"></a>2. 环境</h3><h4 id="1-需要多步才能实现的构建"><a href="#1-需要多步才能实现的构建" class="headerlink" title="(1). 需要多步才能实现的构建"></a>(1). 需要多步才能实现的构建</h4><p>构建系统应该是单步的小操作。不应该从源代码控制系统中一小点一小点签出代码。不应该需要一系列神秘指令或环境依赖脚本来构建单个元素。不应该四出寻找额外的小jar,xml文件和其他系统所需的杂物。你应该能够用单个命令签出系统，并单个指令构建它。</p><h4 id="2-需要多步才能做到测试"><a href="#2-需要多步才能做到测试" class="headerlink" title="(2). 需要多步才能做到测试"></a>(2). 需要多步才能做到测试</h4><p>你应该能够用单个指令就可以运行全部单元测试。能够运行全部测试是如此基础和重要，应该快速，轻易和直接了当地做到。</p><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h3><ul><li>函数的参数应该少。</li><li>输出参数违反直觉。如果非要修改，那就修改函数所在对象好了。</li><li>标示参数，布尔值参数宣告函数做了不止一件事，应该消灭掉，即函数只做一件事。</li><li>永不被调用的方法应该丢弃。</li></ul><h3 id="4-一般性问题"><a href="#4-一般性问题" class="headerlink" title="4. 一般性问题"></a>4. 一般性问题</h3><p>(1). 如果代码需要有多种语言，那么应该尽力减少源文件中额外语言的数量和范围。</p><p>(2). 明显的行为未被实现，如果明显的行为未被实现，读者和用户就不能再依靠他们对函数名称的直觉。他们不再信任原作者，不得不阅读代码细节。</p><p>(3). 不正确的边界行为，追索每种边界条件，编写测试。</p><p>(4). 忽视安全</p><p>(5). 重复，尽可能找到并消除重复。</p><p>(6). 在错误的抽象层级上的代码，创建分离较高层级一般性概念与较低层级细节概念的抽象模型，这很重要。</p><p>(7). 基类不可多度依赖于派生类，基类应该对派生类一无所知。</p><p>(8). 信息过多，设计良好的模块有着非常小的接口，让你事半功倍。设计良好的接口并不提供许多需要依靠的函数，所以耦合度比较低。</p><p>优秀的软件开发人员学会限制类或模块中暴露的接口数量。类中的方法越少越好。函数知道的变量越少越好。类拥有的实体变量越少越好。隐藏你的数据。隐藏你的工具函数。隐藏你的常量和你的临时变量。不要创建拥有大量方法或大量实体变量的类。不要为子类创建大量受保护变量和函数。尽力保持接口紧凑。通过限制信息来控制耦合度。</p><p>(9). 死代码一定要删除。</p><p>(10). 垂直分隔，变量和函数应该在靠近被使用的地方定义。私有函数应该刚好在其首次被使用的位置下面定义。</p><p>(11). 前后不一致，从一而终即一旦选中，就小心持续遵循。如果在特定函数中用了response的变量来持有HttpServletResponse对象，则在其他用到HttpServletResponse对象的函数中也用同样的变量名。这样会让你的代码更易阅读。</p><p>(12). 混淆视听，没用的变量或者函数直接删掉，以免造成不必要的干扰。</p><p>(13). 人为耦合，不互相依赖的东西不该耦合。一般来说，人为耦合是指两个没有直接目的之间的模块的耦合。其根源是将变量，常量或函数不恰当地放在临时方便的位置。</p><p>(14). 特性依恋，类的方法只应对其所属类中的变量和函数感兴趣，不该垂青其他类中的变量和函数。当方法通过某个其他对象的访问器和修改器来操作该对象内部数据，则它就依恋于该对象所属类的范围。</p><p>(15). 选择算子参数，尽量不要把boolean作为函数参数</p><p>(16). 晦涩意图，代码要尽可能具有表达力。</p><p>(17). 位置错误的权责，我们可以采用最小惊异原则来帮助我们即代码应该放在读者自然而然期待它所在的地方。</p><p>(18). 不恰当的静态方法，对于没有机会打算让它有多态行为的函数可以作为动态函数，否则可选用静态函数。</p><p>(19). 使用解释性变量，命名要有意义。</p><p>(20). 函数名称应该表达其行为</p><p>(21). 理解算法</p><p>(22). 把逻辑依赖改为物理依赖：</p><ul><li>1.逻辑依赖：原始数据和业务逻辑之间的依赖关系。例如：定义的常量和业务逻辑存在着依赖关系或者说被捆绑在了一起，即当业务逻辑发生变化或者存在其他可能性的时候且定义的常量无法满足导致常量需要修改。</li><li>2.物理依赖：函数方法和业务逻辑之间的依赖关系。例如：为了解决逻辑依赖的问题，我们可以通过构造一个方法将数据和业务隔离。</li></ul><p>(23). 用多态替代<code>if/else</code> 或 <code>switch/case</code></p><p>(24). 遵循标准约定</p><p>(25). 用命名常量替代魔术数，魔术数不仅仅指的是数字，也泛指任何不能自我描述的符号。</p><p>(26). 准确，在可以用List的时候，非要把变量声明为ArrayList就过分拘束了。在代码中做决定时，确认自己足够准确。明确自己为何要这么做，如果遇到异常情况如何处理。别懒得理会决定的准确性。代码中的含糊和不准确性要么是意见不同的结果，要么源于懒惰。无论原因是什么，都要消除。</p><p>(27). 结构甚于约定，坚守结构甚于约定的设计决策。</p><p>(28). 封装条件，如果没有if或while语句的上下文，布尔逻辑就难以理解。应该把解释了条件意图的函数抽离出来。</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">shouldBeDeleted</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>要好于</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span><span class="token function">hasExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">.</span><span class="token function">isRecurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>(29). 避免否定性条件，尽可能将条件表示为肯定形式。</p><p>(30). 函数只该做一件事</p><p>(31). 掩蔽时序耦合，排列函数参数，好让它们被调用的次序显而易见。</p><p>(32). 别随意，构建代码需要理由，而且理由应于代码结构相契合。</p><p>(33). 封装边界条件，把处理边界条件的代码集中到一处，不要散落于代码中。</p><p>(34). 函数应该只在一个抽象层级上，函数中的语句应该在同意抽象级上，该层级应该是函数名所示操作的下一层。</p><p>(35). 在较高层级放置可配置数据，如果你有个已知并在较高抽象层级的默认常量或配置值，不要将它埋藏到较低层级的函数中。把它作为较高层级函数调用较低层级函数时的一个参数。位于较高层级的配置性常量易于修改。它们向下贯穿应用程序。应用程序的较低层级并不拥有这些常量的值。</p><p>(36). 避免传递浏览，编写害羞代码。</p><p>(37). 不要继承常量</p><h3 id="17-5-测试"><a href="#17-5-测试" class="headerlink" title="17.5 测试"></a>17.5 测试</h3><ol><li>使用覆盖率工具，覆盖率工具能汇报你测试策略中的缺口。使用测试覆盖率工具能更容易地找到不足的模块，类和函数。</li><li>别略过小测试</li><li>被忽略的测试就是对不确定事物的疑问。</li><li>测试边界条件</li><li>全面测试相近的缺陷，缺陷趋向于扎堆。</li><li>测试失败的模式有启发性。</li><li>测试覆盖率的模式有启发性，查看被或未被以通过的测试执行的代码，往往能发现失败的测试为何失败的线索。</li><li>测试应该快速。</li></ol><p>来自：[代码整洁之道内容概要][1]</p>]]></content>
      
      
      <categories>
          
          <category> 编程之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整洁代码 </tag>
            
            <tag> 重构 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub-HelloWorld</title>
      <link href="/2019/10/10/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/"/>
      <url>/2019/10/10/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<p>该Hello World项目是计算机编程历史悠久的传统项目。这是一个简单的练习，可以让您从中学到新知识。让我们开始使用GitHub！</p><p>您将学习如何：</p><p>创建和使用存储库<br>启动和管理新分支<br>更改文件并将其作为提交推送到GitHub<br>打开并合并拉取请求</p><p>##什么是GitHub？<br>GitHub是用于版本控制和协作的代码托管平台。它使您和其他人可以在任何地方共同处理项目。</p><p>本教程教您GitHub基本知识，例如存储库，分支，提交和请求请求。您将创建自己的Hello World存储库，并学习GitHub的Pull Request工作流程，这是一种创建和查看代码的流行方法。</p><p>无需编码<br>要完成本教程，您需要一个GitHub.com帐户和Internet访问权限。您无需知道如何编码，使用命令行或安装Git（版本控制软件GitHub是基于GitHub构建的）。</p><p>提示：在单独的浏览器窗口（或选项卡）中打开本指南，以便在完成教程中的步骤时可以看到它。</p><p>##步骤1.创建存储库<br>一个库通常用于举办单个项目。储存库可以包含文件夹和文件，图像，视频，电子表格和数据集-项目需要的任何内容。我们建议包括README或包含有关项目信息的文件。使用GitHub可以轻松地在创建新存储库的同时添加一个。它还提供了其他常用选项，例如许可证文件。</p><p>您的hello-world存储库可以是您存储思想，资源，甚至与他人共享和讨论事物的地方。</p><p>创建一个新的存储库<br>在右上角，您的头像或标识旁边，单击 然后选择“ 新建存储库”。<br>命名您的存储库hello-world。<br>写一个简短的描述。<br>选择使用README初始化此存储库。<br>新形式</p><p>单击创建存储库。</p><p>##步骤2.创建一个分支<br>分支是一次在不同版本的存储库上工作的方式。</p><p>默认情况下，您的存储库有一个名为的分支master，该分支被视为权威分支。我们使用分支进行实验并进行修改，然后再将其提交到master。</p><p>当您在分支机构外创建分支机构时master，您正在复制master当时的副本或快照。如果master在您处理分支时其他人对该分支进行了更改，则可以提取这些更新。</p><p>该图显示：</p><p>该master分支<br>一个新的分支称为feature（因为我们正在该分支上进行“功能工作”）<br>feature合并之前的旅程master<br>分店</p><p>您是否曾经保存过文件的不同版本？就像是：</p><p>story.txt<br>story-joe-edit.txt<br>story-joe-edit-reviewed.txt<br>分支在GitHub存储库中实现了相似的目标。</p><p>在GitHub，我们的开发人员，作家和设计师使用分支机构将错误修复和功能工作与master（生产）分支机构分开。更改准备就绪后，他们会将分支合并到中master。</p><p>创建一个新分支<br>转到新的存储库hello-world。<br>单击文件列表顶部显示分支：master的下拉列表。<br>readme-edits在新的分支文本框中输入分支名称。<br>选择蓝色的“ 创建”分支框，或在键盘上按“ Enter”。<br>分支gif</p><p>现在您有两个分支，master和readme-edits。它们看起来完全一样，但时间不长！接下来，我们将更改添加到新分支。</p><p>##步骤3.进行并提交更改<br>太棒了！现在，您在readme-edits分支的代码视图中，该视图是的副本master。让我们进行一些编辑。</p><p>在GitHub上，保存的更改称为commits。每个提交都有一个关联的提交消息，该消息是说明为什么进行特定更改的说明。提交消息记录了更改的历史记录，因此其他贡献者可以了解您所做的事情以及原因。</p><p>进行并提交更改<br>单击README.md文件。<br>点击  要编辑的文件视图右上角的铅笔图标。<br>在编辑器中，写一些关于您自己的信息。<br>编写描述您所做更改的提交消息。<br>单击提交更改按钮。<br>承诺</p><p>这些更改将仅对您readme-edits分支上的README文件进行，因此现在此分支包含的内容不同于master。</p><p>步骤4.打开拉取请求<br>不错的编辑！现在您已经在分支的分支中进行了更改master，您可以打开拉取请求。</p><p>拉取请求是GitHub上协作的核心。当您打开请求请求时，您正在提出更改，并要求某人检查并提取您的贡献并将其合并到其分支中。拉取请求显示两个分支中内容的差异或差异。更改，加法和减法以绿色和红色显示。</p><p>提交后，即使在代码完成之前，也可以打开请求请求并开始讨论。</p><p>通过在请求请求消息中使用GitHub的@mention系统，您可以要求特定人员或团队提供反馈，无论他们是在大厅还是在10个时区之外。</p><p>您甚至可以在自己的存储库中打开拉取请求，然后自己合并它们。这是在进行大型项目之前学习GitHub流程的好方法。</p><p>打开请求更改自述文件的请求<br>点击图像查看大图</p><p>步    屏幕截图<br>点击  “拉取请求”选项卡，然后从“拉取请求”页面中，单击绿色的“ 新建拉取请求”按钮。    预标签<br>在“ 示例比较”框中，选择readme-edits要与master（原始）进行比较的分支。    科<br>在“比较”页面上的差异中查看您的更改，确保它们是您要提交的。    差异<br>如果您对要提交的更改感到满意，请单击绿色的大的创建请求请求按钮。    创建拉<br>给您的请求请求一个标题，并写下您所做更改的简短描述。    形式<br>完成您的消息后，单击创建请求请求！</p><p>提示：您可以使用的表情符号和拖放图片和GIF到的意见和引入请求。</p><p>步骤5.合并您的拉取请求<br>在最后的步骤中，是时候将您的更改集中在一起了–将readme-edits分支合并到master分支中。</p><p>点击绿色的合并拉取请求按钮，将更改合并到中master。<br>点击确认合并。<br>继续并删除分支，因为已经合并了其更改，请在紫色框中使用“ 删除分支”按钮。<br>合并 删除</p><p>庆祝！<br>通过完成本教程，您已经学会了创建项目并在GitHub上发出拉取请求！</p><p>这是您在本教程中完成的工作：</p><p>创建一个开源存储库<br>开始并管理一个新分支<br>更改了文件并将这些更改提交到GitHub<br>打开并合并拉取请求<br>查看您的GitHub个人资料，您会看到新的贡献平方！</p><p>要了解有关请求请求功能的更多信息，建议阅读GitHub flow Guide。您还可以访问GitHub Explore，并参与一个开源项目。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解GitHub流程</title>
      <link href="/2019/10/10/ruan-jian-gong-ju/git/liao-jie-github-liu-cheng/"/>
      <url>/2019/10/10/ruan-jian-gong-ju/git/liao-jie-github-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>##了解GitHub流程</p><p>GitHub flow是一个轻量级的，基于分支的工作流，它支持定期进行部署的团队和项目。本指南说明了GitHub flow的工作方式和原因。</p><p>创建一个分支<br>当您在进行项目时，在任何给定的时间都会有许多不同的功能或想法在进行中-其中一些已经准备就绪，而另一些则没有。存在分支可帮助您管理此工作流程。</p><p>当您在项目中创建分支时，您正在创建一个可以尝试新想法的环境。您在分支机构上所做的更改不会影响master分支机构，因此您可以自由地尝试并提交更改，因为您可以知道自己的分支机构不会被合并，直到准备好与您的协作者进行审查为止，这是安全的。</p><p>专家提示<br>分支是Git中的核心概念，整个GitHub流程都以此为基础。只有一条规则：master分支中的任何内容始终都是可部署的。</p><p>因此，在处理功能或修订时，要在主分支之外创建新分支非常重要。您的分行名称应该是描述性的（如refactor-authentication，user-content-cache-key，make-retina-avatars），以便其他人可以看到正在开发中。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zuji-JPA — 定义优于逻辑的Spring Data JPA动态查询扩展库</title>
      <link href="/2019/10/08/hou-duan/jpa/zuji-jpa-ding-yi-you-yu-luo-ji-de-spring-data-jpa-dong-tai-cha-xun-kuo-zhan-ku/"/>
      <url>/2019/10/08/hou-duan/jpa/zuji-jpa-ding-yi-you-yu-luo-ji-de-spring-data-jpa-dong-tai-cha-xun-kuo-zhan-ku/</url>
      
        <content type="html"><![CDATA[<p><a href="https://azhengzj.github.io/zuji-jpa/">官方文档</a></p><blockquote><p><a href="https://github.com/azhengZJ/zuji-jpa" target="_blank" rel="noopener">Zuji-JPA</a> 是一个不用写sql的 <code>Spring Data JPA</code> 增强库，在 Spring Data JPA 的基础上简化开发，目的是让开发者不再去书写冗长的SQL，支持 <code>入参定义式零逻辑</code> 和 <code>极简Java动态链式</code> 两种方式来代替SQL。</p></blockquote><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>由于spring data jpa 在复杂查询这块的短板，我基于specification 功能 开发出了为简化开发而生的Spring Data JPA 增强库 <code>zuji-jpa</code> 框架。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>无侵入性，只做增强不做改变；</li><li>超轻量，jar包只有60K，更好用的spring-data-jpa增强库；</li><li>低功耗，全部基于静态工具类方法实现，程序启动无需加载任何Class；</li><li>提供了 <code>入参定义式零逻辑</code>（支持join） 和 <code>极简Java动态链式</code> 两种方式替代sql；</li><li>支持动态投影（Dynamic Projections），支持自定义实体类（VO/DTO）查询返回；</li><li>单层级的动态条件查询只需定义入参实体类，不用写具体java实现代码，也不用写sql，即可信手拈来；</li><li>多层级嵌套复杂的动态条件查询使用超简洁的动态链式编程即可轻松实现；</li><li>使用zuji-jpa可以大大简化开发、提高效率，节省更多的时间让你专注于业务；</li></ul><h2 id="支持场景"><a href="#支持场景" class="headerlink" title="支持场景"></a>支持场景</h2><p>适用于 Java <code>Spring Data JPA</code> 项目，<code>JDK 1.8</code> 及以上，Spring Data JPA 版本无具体要求。</p><p>使用之前需要对<code>Spring Data JPA</code>框架有一定的了解和使用，如果还未使用过，请先写个简单的DEMO熟悉一下，具体可参考<a href="https://spring.io/projects/spring-data-jpa" target="_blank" rel="noopener">Spring Data JPA</a>官方文档。</p><h2 id="Spring-项目集成"><a href="#Spring-项目集成" class="headerlink" title="Spring 项目集成"></a>Spring 项目集成</h2><p>如果你是 Spring 项目，请直接集成zuji-jpa依赖，spring boot和spring mvc项目均支持。</p><p>gradle</p><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'top.spring-data-jpa:zuji-jpa:1.0.1'</span></code></pre><p>maven</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.spring-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zuji-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>Zuji-JPA查询全部基于Specification进行扩展增强开发，所以使用之前必须要继承JpaSpecificationExecutor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>或者使用Zuji-JPA自带的BaseRepository，BaseRepository继承了JpaSpecificationExecutor和JpaRepository接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRepository</span><span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="1、单层多条件查询"><a href="#1、单层多条件查询" class="headerlink" title="1、单层多条件查询"></a>1、单层多条件查询</h2><blockquote><p>入参定义式零逻辑</p></blockquote><p>入参定义式查询仅支持单层条件查询，支持JOIN，支持equal、like、in、between等这些常用的查询关键字，多层嵌套复杂查询请参考下一节java动态链式查询。</p><p>首先要定义查询入参的实体类，如果字段为NULL则不参与条件查询，默认使用的是等于equal，如果是Collection类型的字段，默认使用的是 IN 查询，<br>也可以使用@QueryOperator 注解里面的 <code>fieldName</code> 字段来定义对应数据库的字段名称。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  如果字段为null则不参与条件查询，默认使用的是等于equal， *  如果是Collection类型的字段，默认使用的是 IN 查询 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReqBlogQueryVO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *  此注解用于忽略查询     */</span>    <span class="token annotation punctuation">@QueryIgnore</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  此注解等同于SQL: title like "value%"     */</span>    <span class="token annotation punctuation">@QueryOperator</span><span class="token punctuation">(</span>Operator<span class="token punctuation">.</span>STARTING_WITH<span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  属于Collection类型，所以默认使用的是IN查询     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> author<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  此注解等同于SQL: content like "%value%"     */</span>    <span class="token annotation punctuation">@QueryOperator</span><span class="token punctuation">(</span>Operator<span class="token punctuation">.</span>CONTAINS<span class="token punctuation">)</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  无注解默认使用的是等于     */</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  LEFT_JOIN的方式有两种，下面使用的是第二种     */</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"createUser"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@QueryOperator</span><span class="token punctuation">(</span>Operator<span class="token punctuation">.</span>CONTAINS<span class="token punctuation">)</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>入参定义式查询支持JOIN，LEFT_JOIN的方式有两种，以下任选其一即可。</p><p>  1、@QueryOperator注解指定实体类JOIN别名，如 @QueryOperator(fieldName=”createUser.userName”,value=Operator.CONTAINS)</p><p>  2、@JoinColumn注解指定JOIN的关联字段名，如 @JoinColumn(name=”createUser”)</p><p>由于Spring Data Jpa是基于Hibernate开发的，所以JOIN还是继承了Hibernate面向对象的方式，需要在实体类里面定义好关联关系。</p><blockquote><p><strong>注</strong>：如果开启了自动建表而又不想在数据库创建外键关联的话需要加上注解<br>    @JoinColumn(foreignKey = @ForeignKey(NO_CONSTRAINT))。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@FieldNameConstants</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......其他属性省略</span>    <span class="token comment" spellcheck="true">/**     * 定义和User表的关联关系     */</span>    <span class="token annotation punctuation">@ManyToOne</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>foreignKey <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>NO_CONSTRAINT<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> User createUser<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义好之后就可以直接使用入参实体类生成查询条件，进行查询。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/blog"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BlogRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> ReqBlogQueryVO query<span class="token punctuation">)</span><span class="token punctuation">{</span>        Specification<span class="token operator">&lt;</span>Blog<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">conditionOf</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>等同于如下sql，如果字段值为NULL，则不参与条件查询。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>     <span class="token number">b</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span>    blog <span class="token number">b</span> <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">user</span> u <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>createUserId <span class="token operator">=</span> u<span class="token punctuation">.</span>id<span class="token keyword">WHERE</span>    <span class="token number">b</span><span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token string">'zuji%'</span>        <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>author <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'azheng1'</span> <span class="token punctuation">,</span> <span class="token string">'azheng2'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>content <span class="token operator">LIKE</span> <span class="token string">'%value%'</span>        <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>user_name <span class="token operator">=</span> <span class="token string">'azheng'</span></code></pre><h2 id="2、多层嵌套复杂条件查询"><a href="#2、多层嵌套复杂条件查询" class="headerlink" title="2、多层嵌套复杂条件查询"></a>2、多层嵌套复杂条件查询</h2><blockquote><p>java动态链式</p></blockquote><p>此查询类似于mybatis-plus的条件构造器。<br>以下示例包含：动态条件查询 + or 嵌套条件+ 排序+ 分页</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ReqUserListVO params<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Specification<span class="token operator">&lt;</span>User<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>UserType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userType"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"assigneeId"</span><span class="token punctuation">,</span> AuthHelper<span class="token punctuation">.</span><span class="token function">currentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           e<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>e2 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>               e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Sort sort <span class="token operator">=</span> Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>判断条件也可以放在方法里面，看起来更简洁一点，如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ReqUserListVO params<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Specification<span class="token operator">&lt;</span>User<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>UserType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"userType"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"assigneeId"</span><span class="token punctuation">,</span> AuthHelper<span class="token punctuation">.</span><span class="token function">currentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>e2 <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Sort sort <span class="token operator">=</span> Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果没有条件判断也可以写成这样，链式编程</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ReqUserListVO params<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Specification<span class="token operator">&lt;</span>User<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userType"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"assigneeId"</span><span class="token punctuation">,</span> AuthHelper<span class="token punctuation">.</span><span class="token function">currentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>e2 <span class="token operator">-</span><span class="token operator">></span> e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Sort sort <span class="token operator">=</span> Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>等同于sql</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token operator">*</span> <span class="token keyword">FROM</span>    <span class="token keyword">user</span><span class="token keyword">WHERE</span>    user_type <span class="token operator">=</span> <span class="token string">'ADMIN'</span>     <span class="token operator">AND</span> user_name <span class="token operator">like</span> <span class="token string">"%admin%"</span>     <span class="token operator">AND</span> assignee_id <span class="token operator">=</span> <span class="token number">11</span>     <span class="token operator">AND</span> <span class="token punctuation">(</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">OR</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span>     <span class="token operator">AND</span> deleted <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    create_time <span class="token keyword">DESC</span>     <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span></code></pre><blockquote><p><strong>注</strong>：如果第一层（最外面层）是OR关联查询，调用where方法的时候需要添加一个参数isConjunction，为true的时候为and连接（默认为true），为false的时候为or连接。</p></blockquote><pre class=" language-java"><code class="language-java">Specification<span class="token operator">&lt;</span>Blog<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> blog <span class="token keyword">where</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">or</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注</strong>：上述示例中查询的字段名使用的是字符串，字符串是不被检查的，很容易出错。lombok提供了可以生成和属性名一样的的静态字段内部类的注解，实体类上面添加@FieldNameConstants注解即可使用。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//...省略</span><span class="token annotation punctuation">@FieldNameConstants</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...省略</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ReqUserListVO params<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Specification<span class="token operator">&lt;</span>User<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>       e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>userType<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>assigneeId<span class="token punctuation">,</span> AuthHelper<span class="token punctuation">.</span><span class="token function">currentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>e2 <span class="token operator">-</span><span class="token operator">></span> e2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>deleted<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Sort sort <span class="token operator">=</span> Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3、两者结合使用"><a href="#3、两者结合使用" class="headerlink" title="3、两者结合使用"></a>3、两者结合使用</h2><p>Zuji-Jpa支持将<code>入参定义式</code>和<code>JAVA动态链式</code>两者结合在一起使用，可以面对更多复杂的场景。</p><p>首先需要定义入参实体类，具体参考<a href="#_1%e3%80%81%e5%8d%95%e5%b1%82%e5%a4%9a%e6%9d%a1%e4%bb%b6%e6%9f%a5%e8%af%a2">入参定义式</a>，定义好之后直接进行查询；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> ReqBlogQueryVO query<span class="token punctuation">)</span><span class="token punctuation">{</span>    Specification<span class="token operator">&lt;</span>Blog<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">conditionOf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>deleted<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如上，在此添加需要的查询，参考第二节 java动态链式 查询</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4、自定义查询返回"><a href="#4、自定义查询返回" class="headerlink" title="4、自定义查询返回"></a>4、自定义查询返回</h2><h3 id="Dynamic-Projections（动态投影）"><a href="#Dynamic-Projections（动态投影）" class="headerlink" title="Dynamic Projections（动态投影）"></a>Dynamic Projections（动态投影）</h3><p>数据库查询大部分时候都要 返回自定义字段（ VO/DTO ），Spring Data Jpa 默认支持 泛型 动态投影（Projections） ，投影的类型可以是接口也可以是类。</p><p>Repository查询接口定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> UUID<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span> Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> UUID<span class="token operator">></span> <span class="token punctuation">{</span>  NamesQueryDTO <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>基于接口的投影</strong>，须提供字段对应的get方法接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">NamesQueryDTO</span> <span class="token punctuation">{</span>  String <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String <span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>基于类的投影</strong>，定义好所有查询字段，并且提供全参构造器。强烈推荐 使用Lombok的@Value注解 简化代码。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token keyword">class</span> <span class="token class-name">NamesOnlyDTO</span> <span class="token punctuation">{</span>    String firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="提供工具类转换"><a href="#提供工具类转换" class="headerlink" title="提供工具类转换"></a>提供工具类转换</h3><p>动态投影有时候会不生效，这时候就需要自己进行类型转换，zuji-jpa提供了相关工具类。</p><p>没有分页的列表</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> EntityUtils<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> RespBlogVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有分页的列表</p><pre class=" language-java"><code class="language-java">Specification<span class="token operator">&lt;</span>Blog<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">conditionOf</span><span class="token punctuation">(</span>vo<span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PageRequest page <span class="token operator">=</span> vo<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> JpaHelper<span class="token punctuation">.</span><span class="token function">castPage</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> page<span class="token punctuation">,</span> RespBlogVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者</p><pre class=" language-java"><code class="language-java">Specification<span class="token operator">&lt;</span>Blog<span class="token operator">></span> spec <span class="token operator">=</span> Specifications<span class="token punctuation">.</span><span class="token function">conditionOf</span><span class="token punctuation">(</span>vo<span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> vo<span class="token punctuation">.</span><span class="token function">pageRequest</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>Blog<span class="token punctuation">.</span>Fields<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token operator">&lt;</span>RespBlogVO<span class="token operator">></span> result <span class="token operator">=</span> JpaHelper<span class="token punctuation">.</span><span class="token function">castPage</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> RespBlogVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>单个对象</p><pre class=" language-java"><code class="language-java">Blog blog <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>RespBlogVO result <span class="token operator">=</span>  EntityUtils<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>Blog<span class="token punctuation">,</span> RespBlogVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果有任何问题或想要更多交流，请加QQ群 <code>758629787</code>。</p><h2 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h2><p>本 <code>Zuji-JPA</code> 的 Spring Data JPA 扩展库遵守 <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">Apache License 2.0</a> 许可证。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JPA </tag>
            
            <tag> Zuji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/12/hello-world/"/>
      <url>/2019/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
